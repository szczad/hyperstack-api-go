/*
Infrahub-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlavorPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlavorPayload{}

// FlavorPayload struct for FlavorPayload
type FlavorPayload struct {
	Name string `json:"name"`
	RegionName string `json:"region_name"`
	Cpu int32 `json:"cpu"`
	Ram float32 `json:"ram"`
	Disk int32 `json:"disk"`
	Gpu string `json:"gpu"`
	GpuCount int32 `json:"gpu_count"`
	IsPublic bool `json:"is_public"`
}

type _FlavorPayload FlavorPayload

// NewFlavorPayload instantiates a new FlavorPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorPayload(name string, regionName string, cpu int32, ram float32, disk int32, gpu string, gpuCount int32, isPublic bool) *FlavorPayload {
	this := FlavorPayload{}
	this.Name = name
	this.RegionName = regionName
	this.Cpu = cpu
	this.Ram = ram
	this.Disk = disk
	this.Gpu = gpu
	this.GpuCount = gpuCount
	this.IsPublic = isPublic
	return &this
}

// NewFlavorPayloadWithDefaults instantiates a new FlavorPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorPayloadWithDefaults() *FlavorPayload {
	this := FlavorPayload{}
	return &this
}

// GetName returns the Name field value
func (o *FlavorPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FlavorPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FlavorPayload) SetName(v string) {
	o.Name = v
}

// GetRegionName returns the RegionName field value
func (o *FlavorPayload) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *FlavorPayload) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *FlavorPayload) SetRegionName(v string) {
	o.RegionName = v
}

// GetCpu returns the Cpu field value
func (o *FlavorPayload) GetCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *FlavorPayload) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *FlavorPayload) SetCpu(v int32) {
	o.Cpu = v
}

// GetRam returns the Ram field value
func (o *FlavorPayload) GetRam() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *FlavorPayload) GetRamOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *FlavorPayload) SetRam(v float32) {
	o.Ram = v
}

// GetDisk returns the Disk field value
func (o *FlavorPayload) GetDisk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *FlavorPayload) GetDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disk, true
}

// SetDisk sets field value
func (o *FlavorPayload) SetDisk(v int32) {
	o.Disk = v
}

// GetGpu returns the Gpu field value
func (o *FlavorPayload) GetGpu() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value
// and a boolean to check if the value has been set.
func (o *FlavorPayload) GetGpuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gpu, true
}

// SetGpu sets field value
func (o *FlavorPayload) SetGpu(v string) {
	o.Gpu = v
}

// GetGpuCount returns the GpuCount field value
func (o *FlavorPayload) GetGpuCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value
// and a boolean to check if the value has been set.
func (o *FlavorPayload) GetGpuCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuCount, true
}

// SetGpuCount sets field value
func (o *FlavorPayload) SetGpuCount(v int32) {
	o.GpuCount = v
}

// GetIsPublic returns the IsPublic field value
func (o *FlavorPayload) GetIsPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value
// and a boolean to check if the value has been set.
func (o *FlavorPayload) GetIsPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublic, true
}

// SetIsPublic sets field value
func (o *FlavorPayload) SetIsPublic(v bool) {
	o.IsPublic = v
}

func (o FlavorPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlavorPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["region_name"] = o.RegionName
	toSerialize["cpu"] = o.Cpu
	toSerialize["ram"] = o.Ram
	toSerialize["disk"] = o.Disk
	toSerialize["gpu"] = o.Gpu
	toSerialize["gpu_count"] = o.GpuCount
	toSerialize["is_public"] = o.IsPublic
	return toSerialize, nil
}

func (o *FlavorPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"region_name",
		"cpu",
		"ram",
		"disk",
		"gpu",
		"gpu_count",
		"is_public",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlavorPayload := _FlavorPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlavorPayload)

	if err != nil {
		return err
	}

	*o = FlavorPayload(varFlavorPayload)

	return err
}

type NullableFlavorPayload struct {
	value *FlavorPayload
	isSet bool
}

func (v NullableFlavorPayload) Get() *FlavorPayload {
	return v.value
}

func (v *NullableFlavorPayload) Set(val *FlavorPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorPayload(val *FlavorPayload) *NullableFlavorPayload {
	return &NullableFlavorPayload{value: val, isSet: true}
}

func (v NullableFlavorPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


