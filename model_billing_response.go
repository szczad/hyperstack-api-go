/*
Infrahub-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the BillingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingResponse{}

// BillingResponse struct for BillingResponse
type BillingResponse struct {
	Type *string `json:"type,omitempty"`
	CalculatedBills []OrganizationObjectResponse `json:"calculated_bills,omitempty"`
}

// NewBillingResponse instantiates a new BillingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingResponse() *BillingResponse {
	this := BillingResponse{}
	return &this
}

// NewBillingResponseWithDefaults instantiates a new BillingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingResponseWithDefaults() *BillingResponse {
	this := BillingResponse{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BillingResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BillingResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BillingResponse) SetType(v string) {
	o.Type = &v
}

// GetCalculatedBills returns the CalculatedBills field value if set, zero value otherwise.
func (o *BillingResponse) GetCalculatedBills() []OrganizationObjectResponse {
	if o == nil || IsNil(o.CalculatedBills) {
		var ret []OrganizationObjectResponse
		return ret
	}
	return o.CalculatedBills
}

// GetCalculatedBillsOk returns a tuple with the CalculatedBills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingResponse) GetCalculatedBillsOk() ([]OrganizationObjectResponse, bool) {
	if o == nil || IsNil(o.CalculatedBills) {
		return nil, false
	}
	return o.CalculatedBills, true
}

// HasCalculatedBills returns a boolean if a field has been set.
func (o *BillingResponse) HasCalculatedBills() bool {
	if o != nil && !IsNil(o.CalculatedBills) {
		return true
	}

	return false
}

// SetCalculatedBills gets a reference to the given []OrganizationObjectResponse and assigns it to the CalculatedBills field.
func (o *BillingResponse) SetCalculatedBills(v []OrganizationObjectResponse) {
	o.CalculatedBills = v
}

func (o BillingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CalculatedBills) {
		toSerialize["calculated_bills"] = o.CalculatedBills
	}
	return toSerialize, nil
}

type NullableBillingResponse struct {
	value *BillingResponse
	isSet bool
}

func (v NullableBillingResponse) Get() *BillingResponse {
	return v.value
}

func (v *NullableBillingResponse) Set(val *BillingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingResponse(val *BillingResponse) *NullableBillingResponse {
	return &NullableBillingResponse{value: val, isSet: true}
}

func (v NullableBillingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


