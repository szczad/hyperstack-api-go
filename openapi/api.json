{
  "openapi": "3.0.1",
  "info": {
    "title": "Infrahub-API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://infrahub-api.nexgencloud.com/v1"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication APIs using authentik"
    },
    {
      "name": "organization",
      "description": "Organizations API"
    },
    {
      "name": "api key",
      "description": "API Key"
    },
    {
      "name": "invite",
      "description": "Invite APIs"
    },
    {
      "name": "permission",
      "description": "Permission APIs"
    },
    {
      "name": "user permission",
      "description": "User Permission APIs"
    },
    {
      "name": "internal",
      "description": "Callback Test"
    },
    {
      "name": "policy",
      "description": "Policy APIs"
    },
    {
      "name": "rbac role",
      "description": "RBAC Role APIs"
    },
    {
      "name": "assigning member role",
      "description": "Assigning Member Role APIs"
    },
    {
      "name": "admin",
      "description": null
    },
    {
      "name": "User",
      "description": "User Admin APIs"
    },
    {
      "name": "dashboard",
      "description": "Dashboard APIs"
    },
    {
      "name": "stock",
      "description": "Stock APIs"
    },
    {
      "name": "environment",
      "description": "Environment APIs"
    },
    {
      "name": "virtual machine events",
      "description": "Virtual Machine Event APIs"
    },
    {
      "name": "virtual machine",
      "description": "Virtual Machine APIs"
    },
    {
      "name": "flavor",
      "description": "Flavor APIs"
    },
    {
      "name": "image",
      "description": "Image APIs"
    },
    {
      "name": "keypair",
      "description": "Keypair APIs"
    },
    {
      "name": "vnc url",
      "description": "VNC Console Link APIs"
    },
    {
      "name": "volume",
      "description": "Volume APIs"
    },
    {
      "name": "volume attachment",
      "description": "Volume Attachment APIs"
    },
    {
      "name": "gpu",
      "description": "GPU APIs"
    },
    {
      "name": "callbacks",
      "description": "Callback APIs"
    },
    {
      "name": "floating ip",
      "description": "Floating IP APIs"
    },
    {
      "name": "region",
      "description": "Region APIs"
    },
    {
      "name": "template",
      "description": "Templates APIs"
    },
    {
      "name": "deployment",
      "description": "Deployment APIs"
    },
    {
      "name": "security-rules",
      "description": "Security Rule APIs"
    },
    {
      "name": "profile",
      "description": "Profile APIs"
    },
    {
      "name": "compliance",
      "description": "Compliance APIs"
    },
    {
      "name": "firewalls",
      "description": "Firewalls APIs"
    },
    {
      "name": "firewall-attachment",
      "description": "Firewall Attachments APIs"
    },
    {
      "name": "user detail choice",
      "description": "User Detail Choice APIs"
    },
    {
      "name": "Admin Images",
      "description": "Admin Images Organization APIs"
    },
    {
      "name": "Admin Flavors",
      "description": "Admin Flavors APIs"
    },
    {
      "name": "Admin Virtual Machines",
      "description": "Admin VM APIs"
    },
    {
      "name": "Admin Environments",
      "description": "Admin Environments APIs"
    },
    {
      "name": "Pricebook",
      "description": "Pricebook APIs"
    },
    {
      "name": "Discount",
      "description": "Discount APIs"
    },
    {
      "name": "Calculate",
      "description": "Calculate APIs"
    },
    {
      "name": "Admin",
      "description": "Admin APIs"
    },
    {
      "name": "Admin Contract",
      "description": "Admin Contract APIs"
    },
    {
      "name": "Customer Contract",
      "description": "Customer Contract APIs"
    },
    {
      "name": "Contract Event",
      "description": "Contract Event APIs"
    },
    {
      "name": "alive",
      "description": null
    },
    {
      "name": "billing",
      "description": null
    },
    {
      "name": "credit",
      "description": null
    },
    {
      "name": "payment",
      "description": null
    },
    {
      "name": "user",
      "description": null
    }
  ],
  "paths": {
    "/api-key": {
      "get": {
        "tags": ["api key"],
        "summary": "Get API Key",
        "operationId": "Get API Key",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiKeyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api-key/generate": {
      "post": {
        "tags": ["api key"],
        "summary": "Generate API Key",
        "operationId": "Generate API Key",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateApiKeyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ]
      }
    },
    "/api-key/verify": {},
    "/auth/admin/credit-warning-mail/{org_id}": {},
    "/auth/admin/data-usages-warning-mail/{org_id}": {},
    "/auth/admin/hibernation-restoration-mail": {},
    "/auth/admin/organizations": {},
    "/auth/admin/organizations/summary": {},
    "/auth/admin/organizations/{id}": {},
    "/auth/admin/payment-confirmation-mail/{org_id}": {},
    "/auth/admin/termination-warning-mail/{org_id}": {},
    "/auth/admin/users": {},
    "/auth/admin/users/{id}": {},
    "/auth/admin/users/{user_id}/update": {},
    "/auth/admin/version": {},
    "/auth/admin/vm-status-mail": {},
    "/auth/invites": {
      "get": {
        "tags": ["invite"],
        "summary": "List Invites",
        "operationId": "List Invites",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInvitesResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["invite"],
        "summary": "Invite an user to organization",
        "operationId": "Invite an user to organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteUserResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/auth/invites/{id}": {
      "delete": {
        "tags": ["invite"],
        "summary": "Delete Invite",
        "operationId": "Delete Invite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/auth/logout": {},
    "/auth/me": {
      "get": {
        "tags": ["auth"],
        "summary": "Get me information",
        "operationId": "Auth user information",
        "responses": {
          "200": {
            "description": "User Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserInfoResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/auth/organizations": {
      "get": {
        "tags": ["organization"],
        "summary": "Organization Info",
        "operationId": "Get organization info",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/auth/organizations/remove-member": {
      "post": {
        "tags": ["organization"],
        "summary": "Remove a member from organization",
        "operationId": "Remove a member from organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveMemberPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMemberFromOrganizationResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/auth/organizations/update": {
      "put": {
        "tags": ["organization"],
        "summary": "Update organization info",
        "operationId": "Update organization info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrganizationResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/auth/permissions": {
      "get": {
        "tags": ["permission"],
        "summary": "List Permissions",
        "operationId": "List Permissions",
        "responses": {
          "200": {
            "description": "Getting permissions success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPermissionsResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/auth/permissions/{id}": {},
    "/auth/policies": {
      "get": {
        "tags": ["policy"],
        "summary": "List Policies",
        "operationId": "List Policies",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPoliciesResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/auth/policies/{id}": {},
    "/auth/refresh": {},
    "/auth/request-login": {},
    "/auth/roles": {
      "get": {
        "tags": ["rbac role"],
        "summary": "List RBAC Roles",
        "operationId": "List RBAC Roles",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRbacRolesResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["rbac role"],
        "summary": "Create RBAC Role",
        "operationId": "Create RBAC Role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateRbacRolePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RbacRoleDetailResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/auth/roles/{id}": {
      "get": {
        "tags": ["rbac role"],
        "summary": "Get a RBAC Role Detail",
        "operationId": "Get a RBAC Role Detail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RbacRoleDetailResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": ["rbac role"],
        "summary": "Update a RBAC Role",
        "operationId": "Update a RBAC Role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateRbacRolePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RbacRoleDetailResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      },
      "delete": {
        "tags": ["rbac role"],
        "summary": "Delete a RBAC Role",
        "operationId": "Delete a RBAC Role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/auth/send/welcome-email/{user_id}": {},
    "/auth/sendgrid-webhook": {},
    "/auth/token": {},
    "/auth/users/me/permissions": {
      "get": {
        "tags": ["user permission"],
        "summary": "List Current User Permissions",
        "operationId": "List Current User Permissions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserPermissionsResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/auth/users/{id}/permissions": {
      "get": {
        "tags": ["user permission"],
        "summary": "List User Permissions",
        "operationId": "List User Permissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserPermissionsResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/auth/users/{user_id}/assign-roles": {
      "put": {
        "tags": ["assigning member role"],
        "summary": "Assign RBAC Roles",
        "operationId": "Assign RBAC Roles",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignRbacRolePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RbacRoleDetailResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/auth/users/{user_id}/roles": {
      "delete": {
        "tags": ["assigning member role"],
        "summary": "Remove role from a user",
        "operationId": "Remove role from a user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/internal/users/{id}/permissions": {},
    "/core/admin/environments/bootstrap-enviroments": {},
    "/core/admin/flavors": {},
    "/core/admin/flavors/{flavor_id}": {},
    "/core/admin/flavors/{flavor_id}/vms": {},
    "/core/admin/images": {},
    "/core/admin/images/{image_id}": {},
    "/core/admin/keypairs": {},
    "/core/admin/organizations/{id}/hibernate": {},
    "/core/admin/resources": {},
    "/core/admin/resources/count": {},
    "/core/admin/resources/defaults": {},
    "/core/admin/resources/sync": {},
    "/core/admin/resources/{id}": {},
    "/core/admin/version": {},
    "/core/admin/virtual-machines": {},
    "/core/admin/virtual-machines/delete-expired-contracted-vms": {},
    "/core/admin/virtual-machines/summary": {},
    "/core/admin/virtual-machines/{id}": {},
    "/core/admin/virtual-machines/{id}/lock": {},
    "/core/admin/virtual-machines/{id}/stop": {},
    "/core/admin/virtual-machines/{virtual_machine_id}/events": {},
    "/core/admin/virtual-machines/{virtual_machine_id}/hibernate": {},
    "/core/admin/virtual-machines/{virtual_machine_id}/hibernate-restore": {},
    "/core/compliance": {
      "get": {
        "tags": ["compliance"],
        "summary": "Retrieve GPU compliance",
        "description": "Returns a list of compliance objects each corresponding to available GPU models. These compliance objects contain minimum and maximum values for RAM in GB, number of vCPUs, and system disk capacity in GB. Use the optional `gpu` model parameter in the query string to filter responses by GPU model. For additional details on GPU compliance, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#adhering-to-gpu-compliance).",
        "operationId": "Retrieve compliance",
        "parameters": [
          {
            "name": "gpu",
            "in": "query",
            "description": "This is for gpu model",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance list retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": ["compliance"],
        "summary": "Update a compliance",
        "operationId": "Update a compliance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompliancePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUpdateComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      },
      "post": {
        "tags": ["compliance"],
        "summary": "Create compliance",
        "operationId": "Create Compliance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompliancePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUpdateComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/compliance/{gpu_model}": {
      "delete": {
        "tags": ["compliance"],
        "summary": "Delete a compliance",
        "operationId": "Delete a compliance",
        "parameters": [
          {
            "name": "gpu_model",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/dashboard": {
      "get": {
        "tags": ["dashboard"],
        "summary": "Retrieve Dashboard",
        "description": "Returns hardware and pricing overview for your active resources, including virtual machines, containers, and volumes. For additional information on the Dashboard feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/dashboard).",
        "operationId": "Retrieve Dashboard",
        "responses": {
          "200": {
            "description": "Getting dashboard info success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/environments": {
      "get": {
        "tags": ["environment"],
        "summary": "List environments",
        "description": "Returns a list of your existing environments, providing the following details for each; environment ID, name, [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions), and the date and time of creation. For more information on environments, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features).",
        "operationId": "List environments",
        "responses": {
          "200": {
            "description": "Successful retrieval of environments list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environments"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["environment"],
        "summary": "Create environment",
        "description": "Creates an environment—a container to organize your resources, including SSH key pairs, virtual machines, and volumes. To create your environment, provide your desired environment name, and [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions) in the request body.",
        "operationId": "Create environment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Environment has been created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/environments/{id}": {
      "get": {
        "tags": ["environment"],
        "summary": "Retrieve environment",
        "description": "Retrieves details about a specific environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.",
        "operationId": "Retrieve environment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": ["environment"],
        "summary": "Update environment",
        "description": "Updates the name of an existing environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.",
        "operationId": "Update environment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Environment name successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      },
      "delete": {
        "tags": ["environment"],
        "summary": "Delete environment",
        "description": "Deletes an environment permanently. Provide the environment ID in the path to remove the specified environment.",
        "operationId": "Delete environment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The environment has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/firewalls": {
      "get": {
        "tags": ["firewalls"],
        "summary": "Retrieve Firewalls",
        "operationId": "Retrieve Firewalls",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirewallsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["firewalls"],
        "summary": "Create Firewall",
        "operationId": "Create Firewall",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFirewallPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirewallResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/firewalls/{firewall_id}/firewall-rules": {
      "post": {
        "tags": ["firewalls"],
        "summary": "Add Rules to Firewall",
        "operationId": "Add Rules to Firewall",
        "parameters": [
          {
            "name": "firewall_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFirewallRulePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirewallRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/firewalls/{firewall_id}/firewall-rules/{firewall_rule_id}": {
      "delete": {
        "tags": ["firewalls"],
        "summary": "Delete Firewall Rules from Firewall",
        "operationId": "Delete Firewall Rules from Firewall",
        "parameters": [
          {
            "name": "firewall_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "firewall_rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/firewalls/{firewall_id}/update-attachments": {
      "post": {
        "tags": ["firewall-attachment"],
        "summary": "Attach Firewalls to VMs",
        "operationId": "Attach Firewall to VMs",
        "parameters": [
          {
            "name": "firewall_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFirewallWithVM"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/firewalls/{id}": {
      "get": {
        "tags": ["firewalls"],
        "summary": "Details of Firewall by ID",
        "operationId": "Details of Firewall by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirewallDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "tags": ["firewalls"],
        "summary": "Delete Firewall",
        "operationId": "Delete Firewall",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/flavors": {
      "get": {
        "tags": ["flavor"],
        "summary": "List flavors",
        "description": "Returns a list of available virtual machine specification configurations, referred to as **flavors**. Include a `region_name` in the query string of the request to return only the flavors available in the specified region; the default value will retrieve flavors available in all regions. For more details on flavors, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors).",
        "operationId": "List flavors",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "description": "Region Name",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of flavors list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/gpus": {
      "get": {
        "tags": ["gpu"],
        "summary": "List GPUs",
        "description": "Returns a list of all available GPUs that can be utilized in the creation of custom virtual machine configurations.",
        "operationId": "List GPUs",
        "responses": {
          "200": {
            "description": "Retrieval of GPUs list successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GPUList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/gpus/{id}": {},
    "/core/image-logos": {},
    "/core/images": {
      "get": {
        "tags": ["image"],
        "summary": "List images",
        "description": "Returns a list of all available operating system (OS) images, providing details about each image's corresponding virtual machine operating system. Include the optional `region` parameter in the query string of the request to specifically return OS images from the designated region. For more information on OS images, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/images).",
        "operationId": "List images",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "description": "Region Name",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval of images list successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Images"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/internal/callbacks/test": {},
    "/core/internal/virtual-machines": {},
    "/core/internal/volumes": {},
    "/core/keypair/{id}": {
      "put": {
        "tags": ["keypair"],
        "summary": "Update key pair name",
        "description": "Updates the name of a specified key pair. Include the key pair ID in the request path and the new `name` of the key pair in the request body.",
        "operationId": "Update key pair name",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKeypairName"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Keypair name updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateKeypairnameresponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      },
      "delete": {
        "tags": ["keypair"],
        "summary": "Delete key pair",
        "description": "Permanently deletes a specified key pair. Include the key pair ID in the request path to remove the designated key pair.",
        "operationId": "Delete key pair",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Keypair successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/keypairs": {
      "get": {
        "tags": ["keypair"],
        "summary": "List key pairs",
        "description": "Retrieves a list of your existing SSH key pairs, providing details for each. For additional information on SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/keypairs-available-features).",
        "operationId": "List key pairs",
        "responses": {
          "200": {
            "description": "Retrieval of key pairs list successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypairs"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["keypair"],
        "summary": "Import key pair",
        "description": "Imports a new key pair for secure shell (SSH) access to your resources. To import a new key pair, include the key name, environment name, and public key in the request body. For additional information on importing SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/getting-started/create-keypair#importing-an-ssh-key).",
        "operationId": "Import key pair",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportKeypairPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Keypair is imported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportKeypairResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/marketplace/deployments": {
      "get": {
        "tags": ["deployment"],
        "summary": "List Deployments",
        "operationId": "List Deployments",
        "responses": {
          "200": {
            "description": "Getting deployments success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployments"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["deployment"],
        "summary": "Start Deployment",
        "operationId": "Start Deployment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartDeploymentPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Deployment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartDeployment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/marketplace/deployments/{id}": {
      "get": {
        "tags": ["deployment"],
        "summary": "Details of Deployment by ID",
        "operationId": "Details of Deployment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Getting deployment detail success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartDeployment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "tags": ["deployment"],
        "summary": "Delete Deployment",
        "operationId": "Delete Deployment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/marketplace/templates": {
      "get": {
        "tags": ["template"],
        "summary": "List templates",
        "description": "Returns a comprehensive list of templates, providing resource configuration details for each. Optionally, specify the `visibility` as `public` or `private` to retrieve templates with the desired visibility status. To learn more about the templates feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#view-a-list-of-templates).",
        "operationId": "List templates",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "description": "Specify the `visibility` status as either `public` or `private` to filter and retrieve templates with the desired visibility.",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Templates list successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Templates"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["template"],
        "summary": "Create template",
        "description": "Creates a resource template for deployment.",
        "operationId": "Create template",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["content", "description", "is_public", "name"],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "name is required"
                  },
                  "description": {
                    "type": "string",
                    "description": "description is required"
                  },
                  "is_public": {
                    "type": "string",
                    "description": "is_public is required"
                  },
                  "content": {
                    "type": "string",
                    "description": "YAML file is required",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Template added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/marketplace/templates/{id}": {
      "get": {
        "tags": ["template"],
        "summary": "Retrieve template details",
        "description": "Retrieves the resource configuration details for a specified template. Provide the template ID in the path to retrieve details for the specified template. For additional information on template configuration details, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#retrieve-the-details-for-a-template).",
        "operationId": "Retrieve template details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": ["template"],
        "summary": "Update template",
        "description": "Updates the details of a template. Modify the template name, description and/or `is_public` status to change the public/private visibility of the template.",
        "operationId": "Update template",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Template updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      },
      "delete": {
        "tags": ["template"],
        "summary": "Delete template",
        "description": "Permanently deletes a template. Supply the template ID in the path to delete the specified template.",
        "operationId": "Delete template",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/profiles": {
      "get": {
        "tags": ["profile"],
        "summary": "List profiles",
        "description": "Returns a list of your existing provisioning profiles, providing virtual machine configuration details for each. For additional information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles#retrieve-a-list-of-profiles).",
        "operationId": "List profiles",
        "responses": {
          "200": {
            "description": "Getting profiles success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["profile"],
        "summary": "Create profile",
        "description": "Creates a provisioning profile to save the configuration of a virtual machine for future use. Include the profile name, description, and virtual machine configuration details in the request body. For more information about virtual machine profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).",
        "operationId": "Create profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfilePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Profile created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/profiles/{id}": {
      "get": {
        "tags": ["profile"],
        "summary": "Retrieve profile details",
        "description": "Retrieves details for an existing provisioning profile by supplying the profile ID in the request path. For more information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).",
        "operationId": "Retrieve profile details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "tags": ["profile"],
        "summary": "Delete profile",
        "description": "Permanently deletes a provisioning profile. Supply the profile ID in the path to delete the specified profile.",
        "operationId": "Delete profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/regions": {
      "get": {
        "tags": ["region"],
        "summary": "List regions",
        "description": "Lists the currently available regions, each representing a distinct geographic location housing a data center. For additional information on regions, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/regions).",
        "operationId": "List regions",
        "responses": {
          "200": {
            "description": "Successful retrieval of regions list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Regions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/regions/{id}": {},
    "/core/sg-rules-protocols": {
      "get": {
        "tags": ["security-rules"],
        "summary": "List firewall rule protocols",
        "description": "Returns a list of all available protocols that can be used in the creation of firewall rules for your virtual machines.",
        "operationId": "List firewall rule protocols",
        "responses": {
          "200": {
            "description": "Protocols list successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityRulesProtocolFields"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/stocks": {
      "get": {
        "tags": ["stock"],
        "description": "Returns information on current and upcoming GPU availability, organized by region and GPU model. For additional information on GPU stocks, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/gpu-stock-information).",
        "operationId": "Retrieve GPU stocks",
        "responses": {
          "200": {
            "description": "GPU stocks retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewStockRetriveResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Stocks Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/stocks/details": {},
    "/core/stocks/upcoming": {},
    "/core/stocks/upcoming/{id}": {},
    "/core/stocks/upcoming/{node_id}/stock": {},
    "/core/stocks/upcoming/{node_id}/stock/{stock_id}": {},
    "/core/stocks/visibility": {},
    "/core/stocks/visibility/add-users": {},
    "/core/stocks/visibility/remove-users": {},
    "/core/user/resources/defaults": {
      "get": {
        "tags": ["user detail choice"],
        "summary": "Retrieve default flavors and images for user",
        "operationId": "Retrieve default flavors and images for user",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDefaultChoicesForUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "List all virtual machines",
        "description": "Returns a list of your existing virtual machines, providing configuration details for each. The list is sorted by creation date, with the oldest virtual machines displayed first.",
        "operationId": "List virtual machines",
        "responses": {
          "200": {
            "description": "Successful retrieval of virtual machine list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instances"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["virtual machine"],
        "summary": "Create virtual machine",
        "description": "Creates one or more virtual machines with the specified custom configuration and features provided in the request body. For more information about the virtual machine features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/virtual-machine-features#create-a-virtual-machine-with-custom-features).",
        "operationId": "Create virtual machine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInstancesPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Virtual machine(s) created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instances"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/virtual-machines/contract/{contract_id}/virtual-machines": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "Retrieve virtual machines associated with a contract",
        "operationId": "Retrieve virtual machines associated with a contract",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInstancesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "Retrieve virtual machine details",
        "description": "Retrieves the details of an existing virtual machine. Supply the virtual machine ID in the path, and Infrahub will return the corresponding Virtual Machine object.",
        "operationId": "Retrieve virtual machine details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "tags": ["virtual machine"],
        "summary": "Delete virtual machine",
        "description": "Permanently deletes a virtual machine. Supply the virtual machine ID in the path to delete the specified virtual machine.",
        "operationId": "Delete virtual machine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}/attach-callback": {
      "post": {
        "tags": ["callbacks"],
        "summary": "Attach callback to virtual machine",
        "description": "Creates a callback URL for a specified virtual machine, enabling the posting of action events executed on the virtual machine to the specified URL. Provide the callback URL in the request body and the ID of the virtual machine to which it is being attached in the path. For more details on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks#attach-a-callback-url-to-an-existing-virtual-machine).",
        "operationId": "Attach callback to virtual machine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachCallbackPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Callback URL successfully attached to your virtual machine. Any action events on your virtual machine will be posted to the provided URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachCallbackResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/virtual-machines/{id}/attach-floatingip": {
      "post": {
        "tags": ["floating ip"],
        "summary": "Attach public IP to virtual machine",
        "description": "Initiates the creation of a public IP address and attaches it to an existing virtual machine, making it accessible through the internet. Include the virtual machine ID in the path to attach a public IP to the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).",
        "operationId": "Attach public IP to virtual machine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public IP successfully attached to VM.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Insufficient balance to create the resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}/delete-callback": {
      "delete": {
        "tags": ["callbacks"],
        "summary": "Delete virtual machine callback",
        "description": "Permanently deletes the callback URL associated with a specified virtual machine by providing the virtual machine ID in the request path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).",
        "operationId": "Delete virtual machine callback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine callback URL successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}/detach-floatingip": {
      "post": {
        "tags": ["floating ip"],
        "summary": "Detach public IP from virtual machine",
        "description": "Removes a public IP address from an existing virtual machine, disabling internet accessibility to the VM. Include the virtual machine ID in the path to detach the public IP from the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).",
        "operationId": "Detach public IP from virtual machine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}/hard-reboot": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "Hard reboot virtual machine",
        "description": "Initiates a hard reboot for a virtual machine, simulating the process of unplugging and rebooting a physical machine. Provide the virtual machine ID in the path to execute a hard reboot for the specified virtual machine.",
        "operationId": "Hard reboot virtual machine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hard reboot process has been successfully initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}/request-console": {
      "get": {
        "tags": ["vnc url"],
        "summary": "Request Instance Console",
        "operationId": "Request Console",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Please wait a few seconds and visit the below link to access your VNC console URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestConsole"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}/sg-rules": {
      "post": {
        "tags": ["virtual machine"],
        "summary": "Add firewall rule to virtual machine",
        "description": "Creates a firewall rule and associates it with a virtual machine. Include the virtual machine ID in the path, and provide the firewall rule configuration in the request body, as detailed below. For additional information on firewall rules, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/security-rules).",
        "operationId": "Add firewall rule to virtual machine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecurityRulePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The firewall rule has been successfully added to the virtual machine.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/virtual-machines/{id}/start": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "Start virtual machine",
        "description": "Initiates the startup of a virtual machine. Supply the virtual machine ID in the path to initiate the starting of the specified virtual machine.",
        "operationId": "Start virtual machine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine started successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}/stop": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "Stop virtual machine",
        "description": "Shuts down a virtual machine. Provide the virtual machine ID in the path to initiate the shutdown process for the specified virtual machine.",
        "operationId": "Stop virtual machine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine shut down successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{id}/update-callback": {
      "put": {
        "tags": ["callbacks"],
        "summary": "Update virtual machine callback",
        "description": "Updates the callback URL for a specified virtual machine. Provide the new callback URL in the request body, along with the ID of the associated virtual machine in the path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).",
        "operationId": "Update virtual machine callback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachCallbackPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Virtual machine callback URL successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachCallbackResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/attach-volumes": {
      "post": {
        "tags": ["volume attachment"],
        "summary": "Attach volumes to virtual machine",
        "description": "Attaches one or more volumes to an existing virtual machine, expanding its storage capacity by 2PB per attached volume. Include the virtual machine ID in the path and the volume IDs in the request body to attach the specified volumes to the designated virtual machine. For additional details on volume attachment, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features#attach-a-volume-to-a-virtual-machine-1).",
        "operationId": "Attach volumes to virtual machine",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachVolumesPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Volumes have been successfully attached to the virtual machine.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachVolumes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/console/{job_id}": {
      "get": {
        "tags": ["vnc url"],
        "summary": "Get VNC Console Link",
        "operationId": "Get VNC Console Link",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get VNC Console Link Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VNCURL"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/detach-volumes": {
      "post": {
        "tags": ["volume attachment"],
        "summary": "Detach volumes from virtual machine",
        "description": "Detaches one or more volumes currently attached to an existing virtual machine. Include the virtual machine ID in the path and the volume IDs in the request body to detach the specified volumes from the designated virtual machine.",
        "operationId": "Detach volumes from virtual machine",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetachVolumesPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Volumes have been successfully detached from the virtual machine.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetachVolumes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/events": {
      "get": {
        "tags": ["virtual machine events"],
        "summary": "List virtual machine events",
        "description": "Retrieves a list of all events in a virtual machine's history, which records actions performed on the specified virtual machine. Include the virtual machine ID in the path to retrieve the history of events. For more details on virtual machine events history, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#events-history).",
        "operationId": "List virtual machine events",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machines event list successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceEvents"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/hibernate": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "Hibernate virtual machine",
        "description": "Initiates the hibernation of a virtual machine, saving its current state to disk before powering off. Provide the virtual machine ID in the path to specify the virtual machine to be hibernated.",
        "operationId": "Hibernate virtual machine",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hibernation request for the virtual machine was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/hibernate-restore": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "Restore virtual machine from hibernation",
        "description": "Resumes a virtual machine from hibernation, bringing it back to an active state. Provide the virtual machine ID in the path to specify the virtual machine to be restored from hibernation.",
        "operationId": "Restore virtual machine from hibernation",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request to restore the virtual machine from hibernation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/label": {
      "put": {
        "tags": ["virtual machine"],
        "summary": "Edit labels of an existing VM",
        "operationId": "Edit labels of an existing VM",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditlabelofanexistingVMPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Labels edited successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/metrics": {
      "get": {
        "tags": ["virtual machine"],
        "summary": "Retrieve virtual machine performance metrics",
        "description": "Retrieves performance metrics data for a virtual machine. Provide the virtual machine ID in the path to retrieve the following data for the specified virtual machine: CPU usage, memory usage (RAM), `network.in`, `network.out`, `disk.read`, and `disk.write`. The optional `duration` parameter can be used to specify the period for retrieving performance metrics; the default value will retrieve all available data. To learn more about virtual machine performance metrics, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#performance-metrics).",
        "operationId": "Retrieve virtual machine performance metrics",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "1h",
                "2h",
                "4h",
                "6h",
                "12h",
                "1d",
                "3d",
                "7d",
                "15d",
                "30d"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine performance metrics have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsFields"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/resize": {
      "post": {
        "tags": ["virtual machine"],
        "summary": "Resize virtual machine",
        "description": "Updates the configuration specifications for an existing virtual machine. Include the virtual machine ID in the path and provide the new configuration, referred to as a `flavor`, in the body of the request. For additional information resizing, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#modify-the-flavor-of-an-existing-virtual-machine).",
        "operationId": "Resize virtual machine",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceResizePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The resizing of the virtual machine configuration was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/virtual-machines/{virtual_machine_id}/sg-rules/{sg_rule_id}": {
      "delete": {
        "tags": ["virtual machine"],
        "summary": "Delete firewall rule from virtual machine",
        "description": "Deletes a firewall rule associated with a virtual machine. Provide the virtual machine ID and the firewall rule ID in the path to remove the specified rule from the specified virtual machine.",
        "operationId": "Delete firewall rule from virtual machine",
        "parameters": [
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sg_rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The firewall rule has been successfully removed from the virtual machine.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/virtual-machines/{vm_id}/attach-firewalls": {
      "post": {
        "tags": ["virtual machine"],
        "summary": "Attach Firewalls to a VM",
        "description": "Attach Firewalls to a VM",
        "operationId": "Attach Firewalls to a VM",
        "parameters": [
          {
            "name": "vm_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFirewallsToVMPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/volume-types": {
      "get": {
        "tags": ["volume"],
        "summary": "List volume types",
        "description": "Retrieves a list of available volume types that can be used in the creation of a new volume.",
        "operationId": "List volume types",
        "responses": {
          "200": {
            "description": "Successful retrieval of volume types list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeTypes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/volumes": {
      "get": {
        "tags": ["volume"],
        "summary": "List volumes",
        "description": "Returns a list of your existing volumes, providing details for each. For more information on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).",
        "operationId": "List volumes",
        "responses": {
          "200": {
            "description": "Successful retrieval of volumes list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volumes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": ["volume"],
        "summary": "Create volume",
        "description": "Creates a volume that can be attached to a virtual machine, expanding its storage capacity. Specify the volume type and custom configuration in the request body. For additional details on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).",
        "operationId": "Create volume",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVolumePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Volume successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/volumes/{id}": {
      "delete": {
        "tags": ["volume"],
        "summary": "Delete volume",
        "description": "Deletes a volume permanently. Provide the volume ID in the path to specify the volume to be deleted.",
        "operationId": "Delete volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Volume successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/volumes/{id}/attach-callback": {
      "post": {
        "tags": ["callbacks"],
        "summary": "Attach callback to volume",
        "description": "Creates a callback URL for a specified volume, enabling the posting of action events executed on the volume to the specified URL. Provide the callback URL in the request body and the ID of the volume to which it is being attached in the path. For more details on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).",
        "operationId": "Attach callback to volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachCallbackPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Callback URL successfully attached to your volume. Any action events on your volume will be posted to the provided URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachCallbackResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/core/volumes/{id}/delete-callback": {
      "delete": {
        "tags": ["callbacks"],
        "summary": "Delete volume callback",
        "description": "Permanently deletes the callback URL associated with a specified volume by providing the volume ID in the request path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).",
        "operationId": "Delete volume callback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Volume callback URL successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/core/volumes/{id}/update-callback": {
      "put": {
        "tags": ["callbacks"],
        "summary": "Update volume callback",
        "description": "Updates the callback URL for a specified volume. Provide the new callback URL in the request body, along with the ID of the associated volume in the path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).",
        "operationId": "Update volume callback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachCallbackPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Callback URL successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachCallbackResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/pricebook": {
      "get": {
        "tags": ["Pricebook"],
        "operationId": "Retrive Pricebook",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricebookModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/pricebook/admin/contracts": {},
    "/pricebook/admin/contracts/check-expire-delete-vms": {},
    "/pricebook/admin/contracts/{contract_id}": {},
    "/pricebook/admin/contracts/{contract_id}/events": {},
    "/pricebook/admin/version": {},
    "/pricebook/calculate": {},
    "/pricebook/calculate/{id}": {},
    "/pricebook/contracts": {
      "get": {
        "tags": ["Customer Contract"],
        "summary": "List Contracts for Customer",
        "operationId": "List Contracts for Customer",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerContractsListResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/pricebook/contracts/{contract_id}": {
      "get": {
        "tags": ["Customer Contract"],
        "summary": "Details of Contract by ID for Customer",
        "operationId": "Details of Contract by ID for Customer",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContractDetailResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/pricebook/discounts/entities": {},
    "/pricebook/discounts/entities/{plan_type}/{entity_id}": {},
    "/pricebook/discounts/entities/{plan_type}/{entity_id}/update-status": {},
    "/pricebook/discounts/flat-per-resource": {},
    "/pricebook/discounts/flat-per-resource/{customer_id}": {},
    "/billing/admin/add_organization": {},
    "/billing/admin/billing/info/{organization_id}": {},
    "/billing/admin/credit/{organization_id}": {},
    "/billing/admin/exclude": {},
    "/billing/admin/payment_history/{organization_id}": {},
    "/billing/admin/recharge_history/{organization_id}": {},
    "/billing/admin/threshold/{organization_id}": {},
    "/billing/admin/usage/{organization_id}": {},
    "/billing/admin/version": {},
    "/billing/alive": {
      "get": {
        "tags": ["alive"],
        "summary": "GET: Alive",
        "operationId": "get_alive",
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          }
        }
      }
    },
    "/billing/billing/last-day-cost": {
      "get": {
        "tags": ["billing"],
        "summary": "GET: Last Day Cost",
        "operationId": "get_last_day_cost",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lastdaycostresponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/billing/billing/usage": {
      "get": {
        "tags": ["billing"],
        "summary": "GET: Billing usage",
        "operationId": "get_usage",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Billingmetricesresponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/billing/payment/payment-details": {
      "get": {
        "tags": ["payment"],
        "summary": "GET: View payment details",
        "operationId": "get_details",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/billing/payment/payment-initiate": {
      "post": {
        "tags": ["payment"],
        "summary": "POST: Initiate payment",
        "operationId": "post_payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentInitiatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInitiateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/billing/user-credit/credit": {
      "get": {
        "tags": ["credit"],
        "summary": "GET: View credit and threshold",
        "operationId": "Check balance as an organization",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Getcreditandthresholdinfoinresponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      }
    },
    "/billing/user/info": {
      "get": {
        "tags": ["user"],
        "summary": "GET: Fetch User Info",
        "operationId": "get_user",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersInfoListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": ["user"],
        "summary": "PUT: Update user info",
        "operationId": "Update user info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Userinfopostpayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserInfoSuccessResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      },
      "post": {
        "tags": ["user"],
        "summary": "POST: Insert user info",
        "operationId": "post_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Userinfopostpayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserInfoSuccessResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "accessToken": []
          },
          {
            "apiKey": []
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    }
  },
  "components": {
    "schemas": {
      "AuthRequestLoginResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/AuthRequestLoginFields"
          }
        }
      },
      "AuthRequestLoginFields": {
        "type": "object",
        "properties": {
          "authorization_url": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          }
        }
      },
      "ErrorResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string"
          },
          "error_reason": {
            "type": "string"
          }
        }
      },
      "GetTokenPayload": {
        "required": ["callback_code", "session_id"],
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          },
          "callback_code": {
            "type": "string"
          }
        }
      },
      "AuthGetTokenResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "token": {
            "$ref": "#/components/schemas/TokenFields"
          },
          "first_login": {
            "type": "boolean"
          }
        }
      },
      "TokenFields": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "RefreshTokenPayload": {
        "required": ["id_token", "refresh_token"],
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "LogoutPayload": {
        "required": ["refresh_token"],
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "AuthUserInfoResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/AuthUserFields"
          }
        }
      },
      "AuthUserFields": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CommonResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "GetOrganizationResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationFields"
          }
        }
      },
      "OrganizationFields": {
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "credit": {
            "type": "integer"
          },
          "threshold": {
            "type": "integer"
          },
          "total_instances": {
            "type": "integer"
          },
          "total_volumes": {
            "type": "integer"
          },
          "total_containers": {
            "type": "integer"
          },
          "total_clusters": {
            "type": "integer"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationUserResponseModel"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrganizationUserResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "sub": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "rbac_roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RbacRoleField"
            }
          },
          "joined_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RbacRoleField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateOrganizationPayload": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateOrganizationResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RemoveMemberPayload": {
        "required": ["email"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "RemoveMemberFromOrganizationResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "GetApiKeyResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "api_key": {
            "$ref": "#/components/schemas/ApiKeyFields"
          }
        }
      },
      "ApiKeyFields": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "GenerateApiKeyResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "api_key": {
            "type": "string"
          }
        }
      },
      "VerifyApiKeyPayload": {
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string"
          }
        }
      },
      "VerifyApiKeyResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "api_key": {
            "$ref": "#/components/schemas/ApiKeyVerifyFields"
          }
        }
      },
      "ApiKeyVerifyFields": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "org_id": {
            "type": "integer"
          },
          "user_role": {
            "type": "string"
          },
          "sub": {
            "type": "string"
          }
        }
      },
      "InviteUserPayload": {
        "required": ["email"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "GetInvitesResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "invites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InviteFields"
            }
          }
        }
      },
      "InviteFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InviteUserResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "invite": {
            "$ref": "#/components/schemas/InviteFields"
          }
        }
      },
      "CreateUpdatePermissionPayload": {
        "required": ["endpoint", "method", "permission", "resource"],
        "type": "object",
        "properties": {
          "resource": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          }
        }
      },
      "GetPermissionsResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionFields"
            }
          }
        }
      },
      "PermissionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "resource": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateUpdatePermissionResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/PermissionFields"
          }
        }
      },
      "GetUserPermissionsResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPermissionFields"
            }
          }
        }
      },
      "UserPermissionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "resource": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          }
        }
      },
      "CreateUpdatePolicyPayload": {
        "required": ["description", "is_public", "name", "permissions"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_public": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "GetPoliciesResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyFields"
            }
          }
        }
      },
      "PolicyFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyPermissionFields"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PolicyPermissionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "resource": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          }
        }
      },
      "CreateUpdatePolicyResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "policy": {
            "$ref": "#/components/schemas/PolicyFields"
          }
        }
      },
      "CreateUpdateRbacRolePayload": {
        "required": ["description", "name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "GetRbacRolesResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RbacRoleFields"
            }
          }
        }
      },
      "RbacRoleFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolePolicyFields"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolePermissionFields"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RolePolicyFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RolePermissionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "resource": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          }
        }
      },
      "RbacRoleDetailResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/RbacRoleFields"
          }
        }
      },
      "AssignRbacRolePayload": {
        "required": ["role_id"],
        "type": "object",
        "properties": {
          "role_id": {
            "type": "integer"
          }
        }
      },
      "AdminOrganizationsResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationFields"
            }
          },
          "organization_count": {
            "type": "integer"
          }
        }
      },
      "AdminOrganizationsSummaryResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminOrganizationSummaryFields"
            }
          }
        }
      },
      "AdminOrganizationSummaryFields": {
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminOrganizationResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "organizations": {
            "$ref": "#/components/schemas/OrganizationFields"
          }
        }
      },
      "AdminVersionResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "AdminHibernationRestorationPayloadModel": {
        "required": ["org_id", "status", "vm_id", "vm_name"],
        "type": "object",
        "properties": {
          "org_id": {
            "type": "integer"
          },
          "vm_name": {
            "type": "string"
          },
          "vm_id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "UserTransferPayload": {
        "required": ["org_id", "role"],
        "type": "object",
        "properties": {
          "org_id": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "AdminUsersResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminUserFields"
            }
          }
        }
      },
      "AdminUserFields": {
        "required": ["email", "id", "org_id", "org_name", "username"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "org_id": {
            "type": "integer"
          },
          "org_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminUserResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/AdminUserFields"
          }
        }
      },
      "DashboardInfoResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "overview": {
            "$ref": "#/components/schemas/OverviewInfo"
          }
        }
      },
      "OverviewInfo": {
        "type": "object",
        "properties": {
          "instance": {
            "$ref": "#/components/schemas/InstanceOverviewFields"
          },
          "container": {
            "$ref": "#/components/schemas/ContainerOverviewFields"
          },
          "volume": {
            "$ref": "#/components/schemas/VolumeOverviewFields"
          }
        }
      },
      "InstanceOverviewFields": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "vcpus": {
            "type": "integer"
          },
          "gpus": {
            "type": "integer"
          },
          "ram": {
            "type": "integer"
          },
          "cost_per_hour": {
            "type": "number"
          }
        }
      },
      "ContainerOverviewFields": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "vcpus": {
            "type": "integer"
          },
          "gpus": {
            "type": "integer"
          },
          "ram": {
            "type": "integer"
          },
          "cost_per_hour": {
            "type": "number"
          }
        }
      },
      "VolumeOverviewFields": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "using": {
            "type": "integer"
          },
          "cost_per_hour": {
            "type": "number"
          }
        }
      },
      "NewStockRetriveResponse": {
        "type": "object",
        "properties": {
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewStockResponse"
            }
          }
        }
      },
      "NewStockResponse": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          },
          "stock-type": {
            "type": "string"
          },
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewModelResponse"
            }
          }
        }
      },
      "NewModelResponse": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "available": {
            "type": "string"
          },
          "planned_7_days": {
            "type": "string"
          },
          "planned_30_days": {
            "type": "string"
          },
          "planned_100_days": {
            "type": "string"
          },
          "configurations": {
            "$ref": "#/components/schemas/NewConfigurationsResponse"
          }
        }
      },
      "NewConfigurationsResponse": {
        "type": "object",
        "properties": {
          "1x": {
            "type": "integer"
          },
          "2x": {
            "type": "integer"
          },
          "4x": {
            "type": "integer"
          },
          "8x": {
            "type": "integer"
          },
          "10x": {
            "type": "integer"
          }
        }
      },
      "StockVisibilityUserListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SingleVisibilityUserResponse"
            }
          }
        }
      },
      "SingleVisibilityUserResponse": {
        "required": ["id", "stock_visible", "user_id"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "stock_visible": {
            "type": "boolean"
          }
        }
      },
      "StockVisibilityUserPayload": {
        "required": ["user_ids"],
        "type": "object",
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "ResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "NodeStockPayloadModel": {
        "type": "object",
        "properties": {
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodePayloadModel"
            }
          }
        }
      },
      "NodePayloadModel": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodePowerUsageModel"
            }
          }
        }
      },
      "NodePowerUsageModel": {
        "required": ["openstack_id"],
        "type": "object",
        "properties": {
          "openstack_id": {
            "type": "string"
          },
          "openstack_name": {
            "type": "string"
          },
          "nexgen_name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "provision_date": {
            "type": "string",
            "format": "date-time"
          },
          "sunset_date": {
            "type": "string",
            "format": "date-time"
          },
          "flavors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeStocksPayload"
            }
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "power_usages": {
            "$ref": "#/components/schemas/PowerUsageModel"
          }
        }
      },
      "NodeStocksPayload": {
        "required": ["in_use", "total", "type"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "in_use": {
            "type": "integer"
          }
        }
      },
      "PowerUsageModel": {
        "required": ["unit", "value"],
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "NodeStockResponseModel": {
        "type": "object",
        "properties": {
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeResponseModel"
            }
          }
        }
      },
      "NodeResponseModel": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeModel"
            }
          }
        }
      },
      "NodeModel": {
        "required": ["openstack_id"],
        "type": "object",
        "properties": {
          "openstack_id": {
            "type": "string"
          },
          "openstack_name": {
            "type": "string"
          },
          "nexgen_name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "provision_date": {
            "type": "string",
            "format": "date-time"
          },
          "sunset_date": {
            "type": "string",
            "format": "date-time"
          },
          "flavors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeStocksPayload"
            }
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "FutureNodesStockModel": {
        "type": "object",
        "properties": {
          "future_stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FutureNodeResponseModel"
            }
          }
        }
      },
      "FutureNodeResponseModel": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FutureNodeModel"
            }
          }
        }
      },
      "FutureNodeModel": {
        "required": ["expected_provision_date"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "openstack_name": {
            "type": "string"
          },
          "nexgen_name": {
            "type": "string"
          },
          "expected_provision_date": {
            "type": "string",
            "description": "Date and time in the format YYYY-MM-DD HH:mm:ss",
            "format": "date-time"
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FutureNodeStockModel"
            }
          }
        }
      },
      "FutureNodeStockModel": {
        "required": ["expected_amount"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "expected_amount": {
            "type": "integer"
          }
        }
      },
      "NewStockUpdateResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "FutureNodeUpdateModel": {
        "required": [
          "expected_provision_date",
          "nexgen_name",
          "openstack_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "region_id": {
            "type": "integer"
          },
          "openstack_name": {
            "type": "string"
          },
          "nexgen_name": {
            "type": "string"
          },
          "expected_provision_date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateEnvironment": {
        "required": ["name", "region"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the environment being created."
          },
          "region": {
            "type": "string",
            "description": "The geographic location of the data center where the environment is being created. To learn more about regions, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/regions)."
          }
        }
      },
      "Environment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentFields"
          }
        }
      },
      "EnvironmentFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Environments": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentFields"
            }
          }
        }
      },
      "UpdateEnvironment": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The new name of the environment."
          }
        }
      },
      "InstanceEvents": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "instance_events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceEventsFields"
            }
          }
        }
      },
      "InstanceEventsFields": {
        "type": "object",
        "properties": {
          "instance_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "org_id": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CreateInstancesPayload": {
        "required": [
          "count",
          "environment_name",
          "flavor_name",
          "key_name",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the virtual machine being created."
          },
          "environment_name": {
            "type": "string",
            "description": "The name of the [environment](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features) in which the virtual machine is to be created."
          },
          "image_name": {
            "type": "string",
            "description": "The [operating system (OS) image](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/images) name designated for installation on the virtual machine."
          },
          "volume_name": {
            "type": "string",
            "description": "The names of the volume(s) to be attached to the virtual machine being created."
          },
          "create_bootable_volume": {
            "type": "boolean",
            "description": "Indicates whether to create a bootable volume for the virtual machine. When set to `true`, a bootable volume will be created; the default value is `false`."
          },
          "flavor_name": {
            "type": "string",
            "description": "The name of the GPU hardware configuration ([flavor](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors)) for the virtual machines being created."
          },
          "flavor": {
            "$ref": "#/components/schemas/FlavorObjectFields"
          },
          "key_name": {
            "type": "string",
            "description": "The name of the existing SSH key pair to be used for secure access to the virtual machine. For additional information on SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/getting-started/create-keypair)."
          },
          "user_data": {
            "type": "string",
            "description": "Optional initialization configuration commands to manage the configuration of a virtual machine at launch using cloud-init scripts. For more information about custom VM configuration using cloud-init, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/initialization-configuration)."
          },
          "callback_url": {
            "maxLength": 250,
            "type": "string",
            "description": "An optional URL where actions performed on the virtual machine will be sent. For additional information on event callbacks, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks)."
          },
          "assign_floating_ip": {
            "type": "boolean",
            "description": "When this field is set to `true`, it attaches a [public IP address](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip) to the virtual machine, enabling internet accessibility."
          },
          "security_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSecurityRulePayload"
            }
          },
          "profile": {
            "$ref": "#/components/schemas/ProfileObjectFields"
          },
          "count": {
            "type": "integer",
            "description": "The number of virtual machines to be created."
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FlavorObjectFields": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "number"
          },
          "disk": {
            "type": "integer"
          },
          "gpu": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          }
        }
      },
      "CreateSecurityRulePayload": {
        "required": ["direction", "ethertype", "protocol", "remote_ip_prefix"],
        "type": "object",
        "properties": {
          "direction": {
            "type": "string",
            "description": "The direction of traffic that the firewall rule applies to."
          },
          "protocol": {
            "type": "string",
            "description": "The network protocol associated with the rule. Call the [`GET /core/sg-rules-protocols`](https://infrahub-api-doc.nexgencloud.com/#get-/core/sg-rules-protocols) endpoint to retrieve a list of permitted network protocols.",
            "example": "any",
            "enum": [
              "any",
              "ah",
              "dccp",
              "egp",
              "esp",
              "gre",
              "hopopt",
              "icmp",
              "igmp",
              "ip",
              "ipip",
              "ipv6-encap",
              "ipv6-frag",
              "ipv6-icmp",
              "icmpv6",
              "ipv6-nonxt",
              "ipv6-opts",
              "ipv6-route",
              "ospf",
              "pgm",
              "rsvp",
              "sctp",
              "tcp",
              "udp",
              "udplite",
              "vrrp"
            ]
          },
          "ethertype": {
            "type": "string",
            "description": "The Ethernet type associated with the rule."
          },
          "remote_ip_prefix": {
            "type": "string",
            "description": "The IP address range that is allowed to access the specified port. Use \"0.0.0.0/0\" to allow any IP address."
          }
        }
      },
      "ProfileObjectFields": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Instances": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceFields"
            }
          }
        }
      },
      "InstanceFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/InstanceEnvironmentFields"
          },
          "image": {
            "$ref": "#/components/schemas/InstanceImageFields"
          },
          "flavor": {
            "$ref": "#/components/schemas/InstanceFlavorFields"
          },
          "os": {
            "type": "string"
          },
          "keypair": {
            "$ref": "#/components/schemas/InstanceKeypairFields"
          },
          "volume_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeAttachmentFields"
            }
          },
          "security_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityRulesFieldsforInstance"
            }
          },
          "power_state": {
            "type": "string"
          },
          "vm_state": {
            "type": "string"
          },
          "fixed_ip": {
            "type": "string"
          },
          "floating_ip": {
            "type": "string"
          },
          "floating_ip_status": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "contract_id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InstanceEnvironmentFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "org_id": {
            "type": "integer"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "InstanceImageFields": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "InstanceFlavorFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "number"
          },
          "disk": {
            "type": "integer"
          },
          "ephemeral": {
            "type": "integer"
          },
          "gpu": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          }
        }
      },
      "InstanceKeypairFields": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "VolumeAttachmentFields": {
        "type": "object",
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/VolumeFieldsforInstance"
          },
          "status": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VolumeFieldsforInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "volume_type": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        }
      },
      "SecurityRulesFieldsforInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "direction": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "port_range_min": {
            "type": "integer"
          },
          "port_range_max": {
            "type": "integer"
          },
          "ethertype": {
            "type": "string"
          },
          "remote_ip_prefix": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Instance": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "instance": {
            "$ref": "#/components/schemas/InstanceFields"
          }
        }
      },
      "SecurityGroupRule": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "security_rule": {
            "$ref": "#/components/schemas/SecurityGroupRuleFields"
          }
        }
      },
      "SecurityGroupRuleFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "direction": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "port_range_min": {
            "type": "integer"
          },
          "port_range_max": {
            "type": "integer"
          },
          "ethertype": {
            "type": "string"
          },
          "remote_ip_prefix": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MetricsFields": {
        "type": "object",
        "properties": {
          "cpu": {
            "$ref": "#/components/schemas/MetricItemFields"
          },
          "memory.usages": {
            "$ref": "#/components/schemas/MetricItemFields"
          },
          "network.in": {
            "$ref": "#/components/schemas/MetricItemFields"
          },
          "network.out": {
            "$ref": "#/components/schemas/MetricItemFields"
          },
          "disk.read": {
            "$ref": "#/components/schemas/MetricItemFields"
          },
          "disk.write": {
            "$ref": "#/components/schemas/MetricItemFields"
          }
        }
      },
      "MetricItemFields": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "example": ["time", "granularity", "value"],
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "array",
            "example": [
              ["2023-09-01T01:19:00+00:00", 60, 1041433070000000],
              ["2023-09-01T01:24:00+00:00", 60, 1041441320000000]
            ],
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "InstanceResizePayload": {
        "type": "object",
        "properties": {
          "flavor_name": {
            "type": "string"
          },
          "flavor": {
            "$ref": "#/components/schemas/FlavorObjectFields"
          }
        }
      },
      "EditlabelofanexistingVMPayload": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContractInstancesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractInstanceFields"
            }
          }
        }
      },
      "ContractInstanceFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "flavor_name": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          }
        }
      },
      "AttachFirewallsToVMPayload": {
        "required": ["firewalls"],
        "type": "object",
        "properties": {
          "firewalls": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "FlavorPayload": {
        "required": [
          "cpu",
          "disk",
          "gpu",
          "gpu_count",
          "is_public",
          "name",
          "ram",
          "region_name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "number"
          },
          "disk": {
            "type": "integer"
          },
          "gpu": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          }
        }
      },
      "FlavorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "flavor": {
            "$ref": "#/components/schemas/FlavorFields"
          }
        }
      },
      "FlavorFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "number"
          },
          "disk": {
            "type": "integer"
          },
          "ephemeral": {
            "type": "integer"
          },
          "gpu": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          },
          "stock_available": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FlavorListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorItemGetResponse"
            }
          }
        }
      },
      "FlavorItemGetResponse": {
        "type": "object",
        "properties": {
          "gpu": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "flavors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorFields"
            }
          }
        }
      },
      "Images": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageGetResponse"
            }
          }
        }
      },
      "ImageGetResponse": {
        "type": "object",
        "properties": {
          "region_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageFields"
            }
          }
        }
      },
      "ImageFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "display_size": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LableResonse"
            }
          },
          "is_public": {
            "type": "boolean"
          }
        }
      },
      "LableResonse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "ImageLogos": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "logos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogoGetResponse"
            }
          }
        }
      },
      "LogoGetResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ImportKeypairPayload": {
        "required": ["environment_name", "name", "public_key"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the key pair that is being created."
          },
          "environment_name": {
            "type": "string",
            "description": "The name of the environment where the key pair is being created."
          },
          "public_key": {
            "type": "string",
            "description": "The public key that is being used to import an SSH key pair."
          }
        }
      },
      "ImportKeypairResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "keypair": {
            "$ref": "#/components/schemas/KeypairFields"
          }
        }
      },
      "KeypairFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Keypairs": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "Keypairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeypairFields"
            }
          }
        }
      },
      "UpdateKeypairName": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The new key pair name."
          }
        }
      },
      "UpdateKeypairnameresponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "keypair": {
            "$ref": "#/components/schemas/KeypairFields"
          }
        }
      },
      "RequestConsole": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "VNCURL": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "vnc_url": {
            "$ref": "#/components/schemas/VNCURLFields"
          }
        }
      },
      "VNCURLFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "vnc_url": {
            "type": "string"
          }
        }
      },
      "CreateVolumePayload": {
        "required": [
          "description",
          "environment_name",
          "name",
          "size",
          "volume_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the volume being created."
          },
          "environment_name": {
            "type": "string",
            "description": "The name of the [environment](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features) within which the volume is being created."
          },
          "description": {
            "type": "string",
            "description": "A brief description or comment about the volume."
          },
          "volume_type": {
            "type": "string",
            "description": "Specifies the type of volume being created, which determines the storage technology it will use. Call the \"[List volume types](https://infrahub-api-doc.nexgencloud.com/#get-/core/volumes)\" endpoint to retrieve a list of available volume model types."
          },
          "size": {
            "type": "integer",
            "description": "The size of the volume in GB. 1048576GB storage capacity per volume."
          },
          "image_id": {
            "type": "integer",
            "description": "The ID of the operating system image that will be associated with the volume. By providing an `image_id` in the create volume request, you will create a bootable volume."
          },
          "callback_url": {
            "maxLength": 250,
            "type": "string",
            "description": "A URL that can be attached to the volume you are creating. This `callback_url` will post any action events that occur to your volume to the provided URL."
          }
        }
      },
      "Volume": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "volume": {
            "$ref": "#/components/schemas/VolumeFields"
          }
        }
      },
      "VolumeFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentFieldsforVolume"
          },
          "description": {
            "type": "string"
          },
          "volume_type": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "bootable": {
            "type": "boolean"
          },
          "image_id": {
            "type": "integer"
          },
          "callback_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EnvironmentFieldsforVolume": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Volumes": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeFields"
            }
          }
        }
      },
      "VolumeTypes": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "volume_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AttachVolumesPayload": {
        "type": "object",
        "properties": {
          "volume_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AttachVolumes": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "volume_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachVolumeFields"
            }
          }
        }
      },
      "AttachVolumeFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "instance_id": {
            "type": "integer"
          },
          "volume_id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DetachVolumesPayload": {
        "type": "object",
        "properties": {
          "volume_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "DetachVolumes": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "volume_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachVolumeFields"
            }
          }
        }
      },
      "CreateGPU": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "example_metadata": {
            "type": "string",
            "description": "A valid JSON string.",
            "example": "{\"key\": \"value\"}"
          }
        }
      },
      "GPU": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "gpu": {
            "$ref": "#/components/schemas/GPUFields"
          }
        }
      },
      "GPUFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GPURegionFields"
            }
          },
          "example_metadata": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GPURegionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GPUList": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "gpu_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GPUFields"
            }
          }
        }
      },
      "UpdateGPU": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "example_metadata": {
            "type": "string",
            "description": "A valid JSON string.",
            "example": "{\"key\": \"value\"}"
          }
        }
      },
      "AttachCallbackPayload": {
        "required": ["url"],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "AttachCallbackResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "InternalInstancesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalInstanceFields"
            }
          }
        }
      },
      "InternalInstanceFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "openstack_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/InternalEnvironmentFields"
          },
          "image": {
            "$ref": "#/components/schemas/InternalInstanceImageFields"
          },
          "flavor": {
            "$ref": "#/components/schemas/InternalInstanceFlavorFields"
          },
          "keypair": {
            "$ref": "#/components/schemas/InternalInstanceKeypairFields"
          },
          "volume_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalVolumeAttachmentFields"
            }
          },
          "boot_source": {
            "type": "string"
          },
          "power_state": {
            "type": "string"
          },
          "vm_state": {
            "type": "string"
          },
          "fixed_ip": {
            "type": "string"
          },
          "floating_ip": {
            "type": "string"
          },
          "floating_ip_status": {
            "type": "string"
          },
          "user_data": {
            "type": "string"
          },
          "security_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalSecurityRulesFieldsForInstance"
            }
          },
          "callback_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InternalEnvironmentFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InternalInstanceImageFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "InternalInstanceFlavorFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "integer"
          },
          "disk": {
            "type": "integer"
          },
          "gpu": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InternalInstanceKeypairFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InternalVolumeAttachmentFields": {
        "type": "object",
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/InternalVolumeFields"
          },
          "status": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InternalVolumeFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "volume_type": {
            "type": "string"
          },
          "size": {
            "type": "string"
          }
        }
      },
      "InternalSecurityRulesFieldsForInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "direction": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "port_range_min": {
            "type": "integer"
          },
          "port_range_max": {
            "type": "integer"
          },
          "ethertype": {
            "type": "string"
          },
          "remote_ip_prefix": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InternalVolumesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalVolumeFields"
            }
          }
        }
      },
      "RegionPayload": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RegionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/RegionFields"
          }
        }
      },
      "RegionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Regions": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionFields"
            }
          }
        }
      },
      "Template": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/TemplateFields"
          }
        }
      },
      "TemplateFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "is_public": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Templates": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateFields"
            }
          }
        }
      },
      "UpdateTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_public": {
            "type": "boolean"
          }
        }
      },
      "StartDeploymentPayload": {
        "required": ["description", "name", "template_id"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "template_id": {
            "type": "integer"
          },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "StartDeployment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "deployment": {
            "$ref": "#/components/schemas/DeploymentFieldsforstartdeployments"
          }
        }
      },
      "DeploymentFieldsforstartdeployments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "template": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "variables": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Deployments": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentFields"
            }
          }
        }
      },
      "DeploymentFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "template": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SecurityRulesProtocolFields": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "protocols": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateProfilePayload": {
        "required": ["data", "name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the profile being created."
          },
          "description": {
            "maxLength": 150,
            "type": "string",
            "description": "The optional description for the profile being created."
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The data object which contains the configuration of the virtual machine profile being created."
          }
        }
      },
      "CreateProfileResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/ProfileFields"
          }
        }
      },
      "ProfileFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProfileListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileFields"
            }
          }
        }
      },
      "InstanceAdmin": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "instance": {
            "$ref": "#/components/schemas/InstanceAdminFields"
          }
        }
      },
      "InstanceAdminFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/InstanceEnvironmentFields"
          },
          "image": {
            "$ref": "#/components/schemas/InstanceImageFields"
          },
          "flavor": {
            "$ref": "#/components/schemas/InstanceFlavorFields"
          },
          "os": {
            "type": "string"
          },
          "keypair": {
            "$ref": "#/components/schemas/InstanceKeypairFields"
          },
          "volume_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeAttachmentFields"
            }
          },
          "security_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityRulesFieldsforInstance"
            }
          },
          "power_state": {
            "type": "string"
          },
          "vm_state": {
            "type": "string"
          },
          "fixed_ip": {
            "type": "string"
          },
          "floating_ip": {
            "type": "string"
          },
          "floating_ip_status": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "contract_id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "openstack_id": {
            "type": "string"
          },
          "host": {
            "type": "string"
          }
        }
      },
      "InstancesAdmin": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceAdminFields"
            }
          },
          "instance_count": {
            "type": "integer"
          }
        }
      },
      "AdminOrganizationResourceList": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminOrganizationResources"
            }
          }
        }
      },
      "AdminOrganizationResources": {
        "type": "object",
        "properties": {
          "organization_id": {
            "type": "integer"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminEnvrionmentResources"
            }
          }
        }
      },
      "AdminEnvrionmentResources": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminInstanceResources"
            }
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminVolumeResource"
            }
          },
          "containers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminContainerResource"
            }
          },
          "clusters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminClusterResource"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminInstanceResources": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "openstack_id": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "flavor": {
            "$ref": "#/components/schemas/AdminFlavorResource"
          },
          "image_id": {
            "type": "integer"
          },
          "volume_id": {
            "type": "integer"
          },
          "keypair_name": {
            "type": "string"
          },
          "fixed_ip": {
            "type": "string"
          },
          "floating_ip": {
            "type": "string"
          },
          "contract_id": {
            "type": "integer"
          },
          "floating_ip_status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminFlavorResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "openstack_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "number"
          },
          "disk": {
            "type": "integer"
          },
          "gpu": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          },
          "stock_available": {
            "type": "boolean"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminNodeResource"
            }
          },
          "vms": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "is_public": {
            "type": "boolean"
          },
          "is_custom": {
            "type": "boolean"
          },
          "ephemeral": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminNodeResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "openstack_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "available": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "provision_date": {
            "type": "string",
            "format": "date-time"
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AdminVolumeResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "openstack_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "bootable": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminContainerResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "flavor": {
            "$ref": "#/components/schemas/AdminFlavorResource"
          },
          "status": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "fixed_ip": {
            "type": "string"
          },
          "floating_ip": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminClusterResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "kubernetes_version": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "master_count": {
            "type": "integer"
          },
          "node_count": {
            "type": "integer"
          },
          "node_flavor": {
            "$ref": "#/components/schemas/AdminFlavorResource"
          },
          "enable_public_ip": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminOrganizationResourceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/AdminOrganizationResources"
          }
        }
      },
      "AdminGetVersionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "AdminCountResourcesOrganizations": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminCountResourcesOrganization"
            }
          }
        }
      },
      "AdminCountResourcesOrganization": {
        "type": "object",
        "properties": {
          "organization_id": {
            "type": "integer"
          },
          "total_instances": {
            "type": "integer"
          },
          "total_volumes": {
            "type": "integer"
          },
          "total_containers": {
            "type": "integer"
          },
          "total_clusters": {
            "type": "integer"
          }
        }
      },
      "InstancesSummaryAdmin": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstancesSummaryFields"
            }
          }
        }
      },
      "InstancesSummaryFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "org_id": {
            "type": "integer"
          },
          "environment_id": {
            "type": "integer"
          },
          "image": {
            "type": "string"
          },
          "image_id": {
            "type": "integer"
          },
          "flavor": {
            "type": "string"
          },
          "flavor_id": {
            "type": "integer"
          },
          "keypair": {
            "type": "string"
          },
          "keypair_id": {
            "type": "integer"
          },
          "fixed_ip": {
            "type": "string"
          },
          "floating_ip": {
            "type": "string"
          },
          "floating_ip_status": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CompliancePayload": {
        "required": [
          "base_value",
          "gpu_model",
          "resource_type",
          "variation_max",
          "variation_min",
          "variation_unit"
        ],
        "type": "object",
        "properties": {
          "gpu_model": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "base_value": {
            "type": "integer"
          },
          "variation_min": {
            "type": "integer"
          },
          "variation_max": {
            "type": "integer"
          },
          "variation_unit": {
            "type": "integer"
          }
        }
      },
      "CreateUpdateComplianceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "compliance": {
            "$ref": "#/components/schemas/ComplianceModelFields"
          }
        }
      },
      "ComplianceModelFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "gpu_model": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "base_value": {
            "type": "integer"
          },
          "variation_min": {
            "type": "integer"
          },
          "variation_max": {
            "type": "integer"
          },
          "variation_unit": {
            "type": "integer"
          }
        }
      },
      "ComplianceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "compliance": {
            "$ref": "#/components/schemas/ComplianceFields"
          }
        }
      },
      "ComplianceFields": {
        "type": "object",
        "properties": {
          "gpu_model": {
            "type": "string"
          },
          "cpu": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ram": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "hdd": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CreateFirewallPayload": {
        "required": ["environment_id", "name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "environment_id": {
            "type": "integer"
          }
        }
      },
      "FirewallResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "firewall": {
            "$ref": "#/components/schemas/FirewallFields"
          }
        }
      },
      "FirewallFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/FirewallEnvironmentFields"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FirewallEnvironmentFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "FirewallsListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "firewalls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirewallDetailFields"
            }
          }
        }
      },
      "FirewallDetailFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/FirewallEnvironmentFields"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroupRuleFields"
            }
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirewallAttachmentModel"
            }
          }
        }
      },
      "FirewallAttachmentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "vm": {
            "$ref": "#/components/schemas/FirewallAttachmentVMModel"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FirewallAttachmentVMModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "flavor": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateFirewallRulePayload": {
        "required": ["direction", "ethertype", "protocol", "remote_ip_prefix"],
        "type": "object",
        "properties": {
          "direction": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "port_range_min": {
            "type": "integer"
          },
          "port_range_max": {
            "type": "integer"
          },
          "ethertype": {
            "type": "string"
          },
          "remote_ip_prefix": {
            "type": "string"
          }
        }
      },
      "FirewallRule": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "firewall_rule": {
            "$ref": "#/components/schemas/SecurityGroupRuleFields"
          }
        }
      },
      "FirewallDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "firewall": {
            "$ref": "#/components/schemas/FirewallDetailFields"
          }
        }
      },
      "AttachFirewallWithVM": {
        "required": ["vms"],
        "type": "object",
        "properties": {
          "vms": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "SetDefaultsPayload": {
        "required": ["flavors", "images"],
        "type": "object",
        "properties": {
          "flavors": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "UserDefaultChoicesForAdminResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "user_default_choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDefaultChoiceForAdminFields"
            }
          }
        }
      },
      "UserDefaultChoiceForAdminFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "region_name": {
            "type": "string"
          },
          "flavor_id": {
            "type": "integer"
          },
          "image_id": {
            "type": "integer"
          }
        }
      },
      "UserDefaultChoicesForUserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "user_default_choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDefaultChoiceForUserFields"
            }
          }
        }
      },
      "UserDefaultChoiceForUserFields": {
        "type": "object",
        "properties": {
          "region_id": {
            "type": "integer"
          },
          "environment_id": {
            "type": "integer"
          },
          "keypair_id": {
            "type": "integer"
          },
          "flavor_id": {
            "type": "integer"
          },
          "image_id": {
            "type": "integer"
          }
        }
      },
      "AdminAddUpdateImageOrganizationPayload": {
        "required": [
          "is_public",
          "name",
          "openstack_id",
          "organizations",
          "region_id",
          "size",
          "type",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "openstack_id": {
            "type": "string"
          },
          "region_id": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AdminImageAdminResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/AdminImageAdminResponseImage"
          }
        }
      },
      "AdminImageAdminResponseImage": {
        "required": ["organizations"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "openstack_id": {
            "type": "string"
          },
          "region_id": {
            "type": "integer"
          },
          "region_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LableResonse"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AdminImageListAdminResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminImageAdminFields"
            }
          }
        }
      },
      "AdminImageAdminFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "openstack_id": {
            "type": "string"
          },
          "region_id": {
            "type": "integer"
          },
          "region_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LableResonse"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AddUpdateFlavorOrganizationPayload": {
        "required": [
          "cpu",
          "disk",
          "gpu_count",
          "gpu_id",
          "is_public",
          "name",
          "openstack_id",
          "organizations",
          "ram",
          "region_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "openstack_id": {
            "type": "string"
          },
          "region_id": {
            "type": "integer"
          },
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "number"
          },
          "disk": {
            "type": "integer"
          },
          "ephemeral": {
            "type": "integer"
          },
          "gpu_id": {
            "type": "integer"
          },
          "gpu_count": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "FlavorAdminResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "flavor": {
            "$ref": "#/components/schemas/FlavorAdminResponseFlavors"
          }
        }
      },
      "FlavorAdminResponseFlavors": {
        "required": ["organizations"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "openstack_id": {
            "type": "string"
          },
          "region_id": {
            "type": "integer"
          },
          "region": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "number"
          },
          "disk": {
            "type": "integer"
          },
          "ephemeral": {
            "type": "integer"
          },
          "gpu": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          },
          "order": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          },
          "is_custom": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "flavors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminFlavorResourcesList": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "flavors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminFlavorResource"
            }
          }
        }
      },
      "FlavorDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "flavor": {
            "$ref": "#/components/schemas/AdminFlavorDetailFields"
          }
        }
      },
      "AdminFlavorDetailFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "openstack_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "ram": {
            "type": "number"
          },
          "disk": {
            "type": "integer"
          },
          "gpu": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "gpu_count": {
            "type": "integer"
          },
          "stock_available": {
            "type": "boolean"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminFlavorDetailNodeFields"
            }
          },
          "vms": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "is_public": {
            "type": "boolean"
          },
          "is_custom": {
            "type": "boolean"
          },
          "org_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ephemeral": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminFlavorDetailNodeFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "openstack_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "available": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "provision_date": {
            "type": "string",
            "format": "date-time"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FlavorVMsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "flavor_vms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorVMFields"
            }
          }
        }
      },
      "FlavorVMFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "openstack_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "org_id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminBootstrapEnvironmentPayload": {
        "required": ["org_id"],
        "type": "object",
        "properties": {
          "org_id": {
            "type": "integer"
          }
        }
      },
      "PricebookModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "original_value": {
            "type": "number"
          },
          "discount_applied": {
            "type": "boolean"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateDiscountsPayload": {
        "required": ["customers", "discount_resources", "discount_status"],
        "type": "object",
        "properties": {
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPayload"
            }
          },
          "discount_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourcePayload"
            }
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "discount_status": {
            "type": "string"
          }
        }
      },
      "CustomerPayload": {
        "required": ["id", "plan_type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "plan_type": {
            "type": "string"
          }
        }
      },
      "ResourcePayload": {
        "required": ["discount_type", "resource_id"],
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "integer"
          },
          "discount_percent": {
            "type": "number"
          },
          "discount_type": {
            "type": "string"
          },
          "discount_amount": {
            "type": "number"
          },
          "resource_count": {
            "type": "integer"
          }
        }
      },
      "GetAllDiscountForAllOrganizationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "discount_plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllDiscountsFields"
            }
          }
        }
      },
      "GetAllDiscountsFields": {
        "type": "object",
        "properties": {
          "org_id": {
            "type": "integer"
          },
          "org_name": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "discount_status": {
            "type": "string"
          },
          "discount_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountResourceFields"
            }
          }
        }
      },
      "DiscountResourceFields": {
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "integer"
          },
          "discount_percent": {
            "type": "number"
          }
        }
      },
      "CreateDiscountResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "discount_plan": {
            "$ref": "#/components/schemas/InsertDiscountPlanFields"
          }
        }
      },
      "InsertDiscountPlanFields": {
        "type": "object",
        "properties": {
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerFields"
            }
          },
          "discount_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountResourceFields"
            }
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "discount_status": {
            "type": "string"
          }
        }
      },
      "CustomerFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "plan_type": {
            "type": "string"
          }
        }
      },
      "UpdateDiscountsPayload": {
        "required": ["discount_resources", "discount_status"],
        "type": "object",
        "properties": {
          "discount_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourcePayload"
            }
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "discount_status": {
            "type": "string"
          }
        }
      },
      "GetEntityDiscountDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "organization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountPlanFields"
            }
          },
          "virtual-machine": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountPlanFields"
            }
          }
        }
      },
      "DiscountPlanFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "resource_id": {
            "type": "integer"
          },
          "resource_name": {
            "type": "string"
          },
          "resource_count": {
            "type": "integer"
          },
          "discount_type": {
            "type": "string"
          },
          "discount_code": {
            "type": "string"
          },
          "discount_percent": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_status": {
            "type": "string"
          }
        }
      },
      "SuccessResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string"
          }
        }
      },
      "UpdateDiscountsStatusPayload": {
        "required": ["discount_status"],
        "type": "object",
        "properties": {
          "discount_status": {
            "type": "string"
          }
        }
      },
      "GetDiscountResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "discount_entites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountFields"
            }
          }
        }
      },
      "DiscountFields": {
        "type": "object",
        "properties": {
          "org_id": {
            "type": "integer"
          },
          "org_name": {
            "type": "string"
          },
          "plan_type": {
            "type": "string"
          },
          "vm_id": {
            "type": "integer"
          },
          "vm_name": {
            "type": "string"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "discount_status": {
            "type": "string"
          }
        }
      },
      "GetDiscountDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "discounts_entity": {
            "$ref": "#/components/schemas/DiscountEntityModel"
          }
        }
      },
      "DiscountEntityModel": {
        "type": "object",
        "properties": {
          "entity": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountPlanFields"
            }
          }
        }
      },
      "BillingResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "calculated_bills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationObjectResponse"
            }
          }
        }
      },
      "OrganizationObjectResponse": {
        "type": "object",
        "properties": {
          "org_id": {
            "type": "integer"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfrahubResourceObjectResponse"
            }
          }
        }
      },
      "InfrahubResourceObjectResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "infrahub_id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricebookResourceObjectResponse"
            }
          },
          "price": {
            "type": "number"
          },
          "actual_price": {
            "type": "number"
          },
          "host_price": {
            "type": "number"
          },
          "actual_host_price": {
            "type": "number"
          },
          "nexgen_price": {
            "type": "number"
          },
          "nexgen_actual_price": {
            "type": "number"
          }
        }
      },
      "PricebookResourceObjectResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "integer"
          },
          "rate": {
            "type": "number"
          },
          "discounted_rate": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "actual_price": {
            "type": "number"
          },
          "host_price": {
            "type": "number"
          },
          "host_original_price": {
            "type": "number"
          },
          "nexgen_price": {
            "type": "number"
          },
          "nexgen_original_price": {
            "type": "number"
          }
        }
      },
      "GetVersionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "CreateContractPayload": {
        "required": ["discount_resources", "expiration_policy", "org_id"],
        "type": "object",
        "properties": {
          "org_id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "discount_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourcePayload"
            }
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_policy": {
            "type": "integer"
          }
        }
      },
      "GetContractsListResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminContractFields"
            }
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "AdminContractFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "org_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_policy": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "gpu_name": {
            "type": "string"
          },
          "percent": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "discount_type": {
            "type": "string"
          },
          "resource_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminCreateContractResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contract": {
            "$ref": "#/components/schemas/CreateContarctFields"
          }
        }
      },
      "CreateContarctFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "org_id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_policy": {
            "type": "integer"
          },
          "discount_plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountPlanFields"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateContractPayload": {
        "required": ["discount_resources", "expiration_policy"],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "discount_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourcePayload"
            }
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_policy": {
            "type": "integer"
          }
        }
      },
      "GetContractDetailResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contract": {
            "$ref": "#/components/schemas/AdminGetContractDetailFields"
          },
          "discount_plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountPlanFields"
            }
          }
        }
      },
      "AdminGetContractDetailFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "org_id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_policy": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetCustomerContractsListResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContractFields"
            }
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "CustomerContractFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "org_id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_policy": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountPlanFields"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CustomerContractDetailResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contracts": {
            "$ref": "#/components/schemas/CustomerContractFields"
          }
        }
      },
      "GetContractEventsResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contract_events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminContractEventFields"
            }
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "AdminContractEventFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "org_id": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Adminaddorganizationpayload": {
        "required": ["organization_id"],
        "type": "object",
        "properties": {
          "organization_id": {
            "type": "integer"
          }
        }
      },
      "Admincreditpostpayload": {
        "type": "object",
        "properties": {
          "credit": {
            "type": "number"
          }
        }
      },
      "Getcreditandthresholdinfoinresponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Getcreditandthresholdinfo"
          }
        }
      },
      "Getcreditandthresholdinfo": {
        "type": "object",
        "properties": {
          "credit": {
            "type": "number"
          },
          "threshold": {
            "type": "number"
          },
          "can_create_instance": {
            "type": "boolean"
          }
        }
      },
      "Adminthresholdpostpayload": {
        "type": "object",
        "properties": {
          "threshold": {
            "type": "number"
          }
        }
      },
      "Adminrechargehistoryresponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Adminrechargehistoryfields"
            }
          }
        }
      },
      "Adminrechargehistoryfields": {
        "type": "object",
        "properties": {
          "credit": {
            "type": "number"
          },
          "threshold": {
            "type": "number"
          },
          "prev_balance": {
            "type": "number"
          },
          "curr_balance": {
            "type": "number"
          },
          "medium": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Billingmetricesresponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Billingmetricesfields"
            }
          }
        }
      },
      "Billingmetricesfields": {
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "integer"
          },
          "resource_type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer"
          },
          "bill_per_minute": {
            "type": "number"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "terminate_time": {
            "type": "string",
            "format": "date-time"
          },
          "total_up_time": {
            "type": "number"
          },
          "total_bill": {
            "type": "number"
          },
          "active": {
            "type": "boolean"
          },
          "exclude_billing": {
            "type": "boolean"
          }
        }
      },
      "Excludebillingpostpayload": {
        "required": ["exclude", "resource_id"],
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "integer"
          },
          "exclude": {
            "type": "boolean"
          }
        }
      },
      "Excludebillingpostresponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Excludebillingpostpayload"
          }
        }
      },
      "Billingimmuneresourcesresponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Billingimmuneresources"
            }
          }
        }
      },
      "Billingimmuneresources": {
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "integer"
          },
          "resource_type": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer"
          }
        }
      },
      "Adminpaymenthistoryresponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Adminpaymenthistoryfields"
            }
          }
        }
      },
      "Adminpaymenthistoryfields": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "medium": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "transaction_id": {
            "type": "string"
          },
          "payment_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UsersInfoListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "users_info": {
            "$ref": "#/components/schemas/UsersInfoFields"
          }
        }
      },
      "UsersInfoFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "organization_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "business": {
            "type": "boolean"
          },
          "company_name": {
            "type": "string"
          },
          "vat_number": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "billing_address1": {
            "type": "string"
          },
          "billing_address2": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Lastdaycostresponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Lastdaycostfields"
          }
        }
      },
      "Lastdaycostfields": {
        "type": "object",
        "properties": {
          "instances_cost": {
            "type": "number"
          },
          "volumes_cost": {
            "type": "number"
          },
          "clusters_cost": {
            "type": "number"
          },
          "total_cost": {
            "type": "number"
          }
        }
      },
      "PaymentInitiatePayload": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          }
        }
      },
      "PaymentInitiateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/PaymentInitiateFields"
          }
        }
      },
      "PaymentInitiateFields": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string"
          }
        }
      },
      "PaymentDetailsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/PaymentDetailsFields"
          }
        }
      },
      "PaymentDetailsFields": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "paid_from": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "gateway_response": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "transaction_id": {
            "type": "string"
          },
          "payment_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "Userinfopostpayload": {
        "required": ["business", "country", "zip_code"],
        "type": "object",
        "properties": {
          "business": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "vat_number": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "billing_address1": {
            "type": "string"
          },
          "billing_address2": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "AddUserInfoSuccessResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UsersInfoFields"
          }
        }
      }
    },
    "responses": {
      "ParseError": {
        "description": "When a mask can't be parsed",
        "content": {}
      },
      "MaskError": {
        "description": "When any error occurs on mask",
        "content": {}
      }
    },
    "securitySchemes": {
      "accessToken": {
        "type": "apiKey",
        "description": "Bearer Token",
        "name": "Authorization",
        "in": "header"
      },
      "apiKey": {
        "type": "apiKey",
        "description": "Send it as api_key in header",
        "name": "api_key",
        "in": "header"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}
