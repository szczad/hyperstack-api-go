/*
Infrahub-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AdminUserFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminUserFields{}

// AdminUserFields struct for AdminUserFields
type AdminUserFields struct {
	Id int32 `json:"id"`
	Username string `json:"username"`
	Email string `json:"email"`
	OrgId int32 `json:"org_id"`
	OrgName string `json:"org_name"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	LastLogin *time.Time `json:"last_login,omitempty"`
}

type _AdminUserFields AdminUserFields

// NewAdminUserFields instantiates a new AdminUserFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminUserFields(id int32, username string, email string, orgId int32, orgName string) *AdminUserFields {
	this := AdminUserFields{}
	this.Id = id
	this.Username = username
	this.Email = email
	this.OrgId = orgId
	this.OrgName = orgName
	return &this
}

// NewAdminUserFieldsWithDefaults instantiates a new AdminUserFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminUserFieldsWithDefaults() *AdminUserFields {
	this := AdminUserFields{}
	return &this
}

// GetId returns the Id field value
func (o *AdminUserFields) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AdminUserFields) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AdminUserFields) SetId(v int32) {
	o.Id = v
}

// GetUsername returns the Username field value
func (o *AdminUserFields) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AdminUserFields) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AdminUserFields) SetUsername(v string) {
	o.Username = v
}

// GetEmail returns the Email field value
func (o *AdminUserFields) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AdminUserFields) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AdminUserFields) SetEmail(v string) {
	o.Email = v
}

// GetOrgId returns the OrgId field value
func (o *AdminUserFields) GetOrgId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *AdminUserFields) GetOrgIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *AdminUserFields) SetOrgId(v int32) {
	o.OrgId = v
}

// GetOrgName returns the OrgName field value
func (o *AdminUserFields) GetOrgName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value
// and a boolean to check if the value has been set.
func (o *AdminUserFields) GetOrgNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgName, true
}

// SetOrgName sets field value
func (o *AdminUserFields) SetOrgName(v string) {
	o.OrgName = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AdminUserFields) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserFields) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AdminUserFields) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AdminUserFields) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *AdminUserFields) GetLastLogin() time.Time {
	if o == nil || IsNil(o.LastLogin) {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserFields) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *AdminUserFields) HasLastLogin() bool {
	if o != nil && !IsNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *AdminUserFields) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

func (o AdminUserFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminUserFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["username"] = o.Username
	toSerialize["email"] = o.Email
	toSerialize["org_id"] = o.OrgId
	toSerialize["org_name"] = o.OrgName
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.LastLogin) {
		toSerialize["last_login"] = o.LastLogin
	}
	return toSerialize, nil
}

func (o *AdminUserFields) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"username",
		"email",
		"org_id",
		"org_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminUserFields := _AdminUserFields{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdminUserFields)

	if err != nil {
		return err
	}

	*o = AdminUserFields(varAdminUserFields)

	return err
}

type NullableAdminUserFields struct {
	value *AdminUserFields
	isSet bool
}

func (v NullableAdminUserFields) Get() *AdminUserFields {
	return v.value
}

func (v *NullableAdminUserFields) Set(val *AdminUserFields) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminUserFields) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminUserFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminUserFields(val *AdminUserFields) *NullableAdminUserFields {
	return &NullableAdminUserFields{value: val, isSet: true}
}

func (v NullableAdminUserFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminUserFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


