/*
Infrahub-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeStocksPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeStocksPayload{}

// NodeStocksPayload struct for NodeStocksPayload
type NodeStocksPayload struct {
	Name *string `json:"name,omitempty"`
	Type string `json:"type"`
	Total int32 `json:"total"`
	InUse int32 `json:"in_use"`
}

type _NodeStocksPayload NodeStocksPayload

// NewNodeStocksPayload instantiates a new NodeStocksPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeStocksPayload(type_ string, total int32, inUse int32) *NodeStocksPayload {
	this := NodeStocksPayload{}
	this.Type = type_
	this.Total = total
	this.InUse = inUse
	return &this
}

// NewNodeStocksPayloadWithDefaults instantiates a new NodeStocksPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeStocksPayloadWithDefaults() *NodeStocksPayload {
	this := NodeStocksPayload{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NodeStocksPayload) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStocksPayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NodeStocksPayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NodeStocksPayload) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value
func (o *NodeStocksPayload) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NodeStocksPayload) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NodeStocksPayload) SetType(v string) {
	o.Type = v
}

// GetTotal returns the Total field value
func (o *NodeStocksPayload) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *NodeStocksPayload) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *NodeStocksPayload) SetTotal(v int32) {
	o.Total = v
}

// GetInUse returns the InUse field value
func (o *NodeStocksPayload) GetInUse() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InUse
}

// GetInUseOk returns a tuple with the InUse field value
// and a boolean to check if the value has been set.
func (o *NodeStocksPayload) GetInUseOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InUse, true
}

// SetInUse sets field value
func (o *NodeStocksPayload) SetInUse(v int32) {
	o.InUse = v
}

func (o NodeStocksPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeStocksPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["type"] = o.Type
	toSerialize["total"] = o.Total
	toSerialize["in_use"] = o.InUse
	return toSerialize, nil
}

func (o *NodeStocksPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"total",
		"in_use",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeStocksPayload := _NodeStocksPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeStocksPayload)

	if err != nil {
		return err
	}

	*o = NodeStocksPayload(varNodeStocksPayload)

	return err
}

type NullableNodeStocksPayload struct {
	value *NodeStocksPayload
	isSet bool
}

func (v NullableNodeStocksPayload) Get() *NodeStocksPayload {
	return v.value
}

func (v *NullableNodeStocksPayload) Set(val *NodeStocksPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeStocksPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeStocksPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeStocksPayload(val *NodeStocksPayload) *NullableNodeStocksPayload {
	return &NullableNodeStocksPayload{value: val, isSet: true}
}

func (v NullableNodeStocksPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeStocksPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


