/*
Infrahub-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the InstancesAdmin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancesAdmin{}

// InstancesAdmin struct for InstancesAdmin
type InstancesAdmin struct {
	Status *bool `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
	Instances []InstanceAdminFields `json:"instances,omitempty"`
	InstanceCount *int32 `json:"instance_count,omitempty"`
}

// NewInstancesAdmin instantiates a new InstancesAdmin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancesAdmin() *InstancesAdmin {
	this := InstancesAdmin{}
	return &this
}

// NewInstancesAdminWithDefaults instantiates a new InstancesAdmin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancesAdminWithDefaults() *InstancesAdmin {
	this := InstancesAdmin{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InstancesAdmin) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesAdmin) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InstancesAdmin) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *InstancesAdmin) SetStatus(v bool) {
	o.Status = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *InstancesAdmin) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesAdmin) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *InstancesAdmin) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *InstancesAdmin) SetMessage(v string) {
	o.Message = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *InstancesAdmin) GetInstances() []InstanceAdminFields {
	if o == nil || IsNil(o.Instances) {
		var ret []InstanceAdminFields
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesAdmin) GetInstancesOk() ([]InstanceAdminFields, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *InstancesAdmin) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []InstanceAdminFields and assigns it to the Instances field.
func (o *InstancesAdmin) SetInstances(v []InstanceAdminFields) {
	o.Instances = v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *InstancesAdmin) GetInstanceCount() int32 {
	if o == nil || IsNil(o.InstanceCount) {
		var ret int32
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesAdmin) GetInstanceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InstanceCount) {
		return nil, false
	}
	return o.InstanceCount, true
}

// HasInstanceCount returns a boolean if a field has been set.
func (o *InstancesAdmin) HasInstanceCount() bool {
	if o != nil && !IsNil(o.InstanceCount) {
		return true
	}

	return false
}

// SetInstanceCount gets a reference to the given int32 and assigns it to the InstanceCount field.
func (o *InstancesAdmin) SetInstanceCount(v int32) {
	o.InstanceCount = &v
}

func (o InstancesAdmin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancesAdmin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.InstanceCount) {
		toSerialize["instance_count"] = o.InstanceCount
	}
	return toSerialize, nil
}

type NullableInstancesAdmin struct {
	value *InstancesAdmin
	isSet bool
}

func (v NullableInstancesAdmin) Get() *InstancesAdmin {
	return v.value
}

func (v *NullableInstancesAdmin) Set(val *InstancesAdmin) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancesAdmin) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancesAdmin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancesAdmin(val *InstancesAdmin) *NullableInstancesAdmin {
	return &NullableInstancesAdmin{value: val, isSet: true}
}

func (v NullableInstancesAdmin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancesAdmin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


