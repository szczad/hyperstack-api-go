/*
Infrahub-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the UserDefaultChoiceForAdminFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDefaultChoiceForAdminFields{}

// UserDefaultChoiceForAdminFields struct for UserDefaultChoiceForAdminFields
type UserDefaultChoiceForAdminFields struct {
	Id *int32 `json:"id,omitempty"`
	RegionName *string `json:"region_name,omitempty"`
	FlavorId *int32 `json:"flavor_id,omitempty"`
	ImageId *int32 `json:"image_id,omitempty"`
}

// NewUserDefaultChoiceForAdminFields instantiates a new UserDefaultChoiceForAdminFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDefaultChoiceForAdminFields() *UserDefaultChoiceForAdminFields {
	this := UserDefaultChoiceForAdminFields{}
	return &this
}

// NewUserDefaultChoiceForAdminFieldsWithDefaults instantiates a new UserDefaultChoiceForAdminFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDefaultChoiceForAdminFieldsWithDefaults() *UserDefaultChoiceForAdminFields {
	this := UserDefaultChoiceForAdminFields{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDefaultChoiceForAdminFields) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefaultChoiceForAdminFields) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDefaultChoiceForAdminFields) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserDefaultChoiceForAdminFields) SetId(v int32) {
	o.Id = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *UserDefaultChoiceForAdminFields) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefaultChoiceForAdminFields) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *UserDefaultChoiceForAdminFields) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *UserDefaultChoiceForAdminFields) SetRegionName(v string) {
	o.RegionName = &v
}

// GetFlavorId returns the FlavorId field value if set, zero value otherwise.
func (o *UserDefaultChoiceForAdminFields) GetFlavorId() int32 {
	if o == nil || IsNil(o.FlavorId) {
		var ret int32
		return ret
	}
	return *o.FlavorId
}

// GetFlavorIdOk returns a tuple with the FlavorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefaultChoiceForAdminFields) GetFlavorIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FlavorId) {
		return nil, false
	}
	return o.FlavorId, true
}

// HasFlavorId returns a boolean if a field has been set.
func (o *UserDefaultChoiceForAdminFields) HasFlavorId() bool {
	if o != nil && !IsNil(o.FlavorId) {
		return true
	}

	return false
}

// SetFlavorId gets a reference to the given int32 and assigns it to the FlavorId field.
func (o *UserDefaultChoiceForAdminFields) SetFlavorId(v int32) {
	o.FlavorId = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *UserDefaultChoiceForAdminFields) GetImageId() int32 {
	if o == nil || IsNil(o.ImageId) {
		var ret int32
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefaultChoiceForAdminFields) GetImageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *UserDefaultChoiceForAdminFields) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given int32 and assigns it to the ImageId field.
func (o *UserDefaultChoiceForAdminFields) SetImageId(v int32) {
	o.ImageId = &v
}

func (o UserDefaultChoiceForAdminFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDefaultChoiceForAdminFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RegionName) {
		toSerialize["region_name"] = o.RegionName
	}
	if !IsNil(o.FlavorId) {
		toSerialize["flavor_id"] = o.FlavorId
	}
	if !IsNil(o.ImageId) {
		toSerialize["image_id"] = o.ImageId
	}
	return toSerialize, nil
}

type NullableUserDefaultChoiceForAdminFields struct {
	value *UserDefaultChoiceForAdminFields
	isSet bool
}

func (v NullableUserDefaultChoiceForAdminFields) Get() *UserDefaultChoiceForAdminFields {
	return v.value
}

func (v *NullableUserDefaultChoiceForAdminFields) Set(val *UserDefaultChoiceForAdminFields) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefaultChoiceForAdminFields) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefaultChoiceForAdminFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefaultChoiceForAdminFields(val *UserDefaultChoiceForAdminFields) *NullableUserDefaultChoiceForAdminFields {
	return &NullableUserDefaultChoiceForAdminFields{value: val, isSet: true}
}

func (v NullableUserDefaultChoiceForAdminFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefaultChoiceForAdminFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


