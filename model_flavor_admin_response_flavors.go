/*
Infrahub-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the FlavorAdminResponseFlavors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlavorAdminResponseFlavors{}

// FlavorAdminResponseFlavors struct for FlavorAdminResponseFlavors
type FlavorAdminResponseFlavors struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	OpenstackId *string `json:"openstack_id,omitempty"`
	RegionId *int32 `json:"region_id,omitempty"`
	Region *string `json:"region,omitempty"`
	Cpu *int32 `json:"cpu,omitempty"`
	Ram *float32 `json:"ram,omitempty"`
	Disk *int32 `json:"disk,omitempty"`
	Ephemeral *int32 `json:"ephemeral,omitempty"`
	Gpu *string `json:"gpu,omitempty"`
	GpuCount *int32 `json:"gpu_count,omitempty"`
	Order *int32 `json:"order,omitempty"`
	IsPublic *bool `json:"is_public,omitempty"`
	IsCustom *bool `json:"is_custom,omitempty"`
	Status *string `json:"status,omitempty"`
	Organizations []int32 `json:"organizations"`
	Flavors []string `json:"flavors,omitempty"`
	Projects []string `json:"projects,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

type _FlavorAdminResponseFlavors FlavorAdminResponseFlavors

// NewFlavorAdminResponseFlavors instantiates a new FlavorAdminResponseFlavors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorAdminResponseFlavors(organizations []int32) *FlavorAdminResponseFlavors {
	this := FlavorAdminResponseFlavors{}
	this.Organizations = organizations
	return &this
}

// NewFlavorAdminResponseFlavorsWithDefaults instantiates a new FlavorAdminResponseFlavors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorAdminResponseFlavorsWithDefaults() *FlavorAdminResponseFlavors {
	this := FlavorAdminResponseFlavors{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FlavorAdminResponseFlavors) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FlavorAdminResponseFlavors) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FlavorAdminResponseFlavors) SetDescription(v string) {
	o.Description = &v
}

// GetOpenstackId returns the OpenstackId field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetOpenstackId() string {
	if o == nil || IsNil(o.OpenstackId) {
		var ret string
		return ret
	}
	return *o.OpenstackId
}

// GetOpenstackIdOk returns a tuple with the OpenstackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetOpenstackIdOk() (*string, bool) {
	if o == nil || IsNil(o.OpenstackId) {
		return nil, false
	}
	return o.OpenstackId, true
}

// HasOpenstackId returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasOpenstackId() bool {
	if o != nil && !IsNil(o.OpenstackId) {
		return true
	}

	return false
}

// SetOpenstackId gets a reference to the given string and assigns it to the OpenstackId field.
func (o *FlavorAdminResponseFlavors) SetOpenstackId(v string) {
	o.OpenstackId = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetRegionId() int32 {
	if o == nil || IsNil(o.RegionId) {
		var ret int32
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetRegionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given int32 and assigns it to the RegionId field.
func (o *FlavorAdminResponseFlavors) SetRegionId(v int32) {
	o.RegionId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *FlavorAdminResponseFlavors) SetRegion(v string) {
	o.Region = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *FlavorAdminResponseFlavors) SetCpu(v int32) {
	o.Cpu = &v
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetRam() float32 {
	if o == nil || IsNil(o.Ram) {
		var ret float32
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetRamOk() (*float32, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given float32 and assigns it to the Ram field.
func (o *FlavorAdminResponseFlavors) SetRam(v float32) {
	o.Ram = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetDisk() int32 {
	if o == nil || IsNil(o.Disk) {
		var ret int32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetDiskOk() (*int32, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given int32 and assigns it to the Disk field.
func (o *FlavorAdminResponseFlavors) SetDisk(v int32) {
	o.Disk = &v
}

// GetEphemeral returns the Ephemeral field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetEphemeral() int32 {
	if o == nil || IsNil(o.Ephemeral) {
		var ret int32
		return ret
	}
	return *o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetEphemeralOk() (*int32, bool) {
	if o == nil || IsNil(o.Ephemeral) {
		return nil, false
	}
	return o.Ephemeral, true
}

// HasEphemeral returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasEphemeral() bool {
	if o != nil && !IsNil(o.Ephemeral) {
		return true
	}

	return false
}

// SetEphemeral gets a reference to the given int32 and assigns it to the Ephemeral field.
func (o *FlavorAdminResponseFlavors) SetEphemeral(v int32) {
	o.Ephemeral = &v
}

// GetGpu returns the Gpu field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetGpu() string {
	if o == nil || IsNil(o.Gpu) {
		var ret string
		return ret
	}
	return *o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetGpuOk() (*string, bool) {
	if o == nil || IsNil(o.Gpu) {
		return nil, false
	}
	return o.Gpu, true
}

// HasGpu returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasGpu() bool {
	if o != nil && !IsNil(o.Gpu) {
		return true
	}

	return false
}

// SetGpu gets a reference to the given string and assigns it to the Gpu field.
func (o *FlavorAdminResponseFlavors) SetGpu(v string) {
	o.Gpu = &v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetGpuCount() int32 {
	if o == nil || IsNil(o.GpuCount) {
		var ret int32
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetGpuCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given int32 and assigns it to the GpuCount field.
func (o *FlavorAdminResponseFlavors) SetGpuCount(v int32) {
	o.GpuCount = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *FlavorAdminResponseFlavors) SetOrder(v int32) {
	o.Order = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *FlavorAdminResponseFlavors) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetIsCustom returns the IsCustom field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetIsCustom() bool {
	if o == nil || IsNil(o.IsCustom) {
		var ret bool
		return ret
	}
	return *o.IsCustom
}

// GetIsCustomOk returns a tuple with the IsCustom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetIsCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustom) {
		return nil, false
	}
	return o.IsCustom, true
}

// HasIsCustom returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasIsCustom() bool {
	if o != nil && !IsNil(o.IsCustom) {
		return true
	}

	return false
}

// SetIsCustom gets a reference to the given bool and assigns it to the IsCustom field.
func (o *FlavorAdminResponseFlavors) SetIsCustom(v bool) {
	o.IsCustom = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FlavorAdminResponseFlavors) SetStatus(v string) {
	o.Status = &v
}

// GetOrganizations returns the Organizations field value
func (o *FlavorAdminResponseFlavors) GetOrganizations() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetOrganizationsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organizations, true
}

// SetOrganizations sets field value
func (o *FlavorAdminResponseFlavors) SetOrganizations(v []int32) {
	o.Organizations = v
}

// GetFlavors returns the Flavors field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetFlavors() []string {
	if o == nil || IsNil(o.Flavors) {
		var ret []string
		return ret
	}
	return o.Flavors
}

// GetFlavorsOk returns a tuple with the Flavors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetFlavorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Flavors) {
		return nil, false
	}
	return o.Flavors, true
}

// HasFlavors returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasFlavors() bool {
	if o != nil && !IsNil(o.Flavors) {
		return true
	}

	return false
}

// SetFlavors gets a reference to the given []string and assigns it to the Flavors field.
func (o *FlavorAdminResponseFlavors) SetFlavors(v []string) {
	o.Flavors = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetProjects() []string {
	if o == nil || IsNil(o.Projects) {
		var ret []string
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetProjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []string and assigns it to the Projects field.
func (o *FlavorAdminResponseFlavors) SetProjects(v []string) {
	o.Projects = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FlavorAdminResponseFlavors) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorAdminResponseFlavors) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FlavorAdminResponseFlavors) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *FlavorAdminResponseFlavors) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o FlavorAdminResponseFlavors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlavorAdminResponseFlavors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.OpenstackId) {
		toSerialize["openstack_id"] = o.OpenstackId
	}
	if !IsNil(o.RegionId) {
		toSerialize["region_id"] = o.RegionId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.Ephemeral) {
		toSerialize["ephemeral"] = o.Ephemeral
	}
	if !IsNil(o.Gpu) {
		toSerialize["gpu"] = o.Gpu
	}
	if !IsNil(o.GpuCount) {
		toSerialize["gpu_count"] = o.GpuCount
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}
	if !IsNil(o.IsCustom) {
		toSerialize["is_custom"] = o.IsCustom
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["organizations"] = o.Organizations
	if !IsNil(o.Flavors) {
		toSerialize["flavors"] = o.Flavors
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

func (o *FlavorAdminResponseFlavors) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlavorAdminResponseFlavors := _FlavorAdminResponseFlavors{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlavorAdminResponseFlavors)

	if err != nil {
		return err
	}

	*o = FlavorAdminResponseFlavors(varFlavorAdminResponseFlavors)

	return err
}

type NullableFlavorAdminResponseFlavors struct {
	value *FlavorAdminResponseFlavors
	isSet bool
}

func (v NullableFlavorAdminResponseFlavors) Get() *FlavorAdminResponseFlavors {
	return v.value
}

func (v *NullableFlavorAdminResponseFlavors) Set(val *FlavorAdminResponseFlavors) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorAdminResponseFlavors) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorAdminResponseFlavors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorAdminResponseFlavors(val *FlavorAdminResponseFlavors) *NullableFlavorAdminResponseFlavors {
	return &NullableFlavorAdminResponseFlavors{value: val, isSet: true}
}

func (v NullableFlavorAdminResponseFlavors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorAdminResponseFlavors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


