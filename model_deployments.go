/*
Infrahub-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the Deployments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Deployments{}

// Deployments struct for Deployments
type Deployments struct {
	Status *bool `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
	Deployments []DeploymentFields `json:"deployments,omitempty"`
}

// NewDeployments instantiates a new Deployments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployments() *Deployments {
	this := Deployments{}
	return &this
}

// NewDeploymentsWithDefaults instantiates a new Deployments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentsWithDefaults() *Deployments {
	this := Deployments{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Deployments) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployments) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Deployments) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *Deployments) SetStatus(v bool) {
	o.Status = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Deployments) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployments) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Deployments) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Deployments) SetMessage(v string) {
	o.Message = &v
}

// GetDeployments returns the Deployments field value if set, zero value otherwise.
func (o *Deployments) GetDeployments() []DeploymentFields {
	if o == nil || IsNil(o.Deployments) {
		var ret []DeploymentFields
		return ret
	}
	return o.Deployments
}

// GetDeploymentsOk returns a tuple with the Deployments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployments) GetDeploymentsOk() ([]DeploymentFields, bool) {
	if o == nil || IsNil(o.Deployments) {
		return nil, false
	}
	return o.Deployments, true
}

// HasDeployments returns a boolean if a field has been set.
func (o *Deployments) HasDeployments() bool {
	if o != nil && !IsNil(o.Deployments) {
		return true
	}

	return false
}

// SetDeployments gets a reference to the given []DeploymentFields and assigns it to the Deployments field.
func (o *Deployments) SetDeployments(v []DeploymentFields) {
	o.Deployments = v
}

func (o Deployments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Deployments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Deployments) {
		toSerialize["deployments"] = o.Deployments
	}
	return toSerialize, nil
}

type NullableDeployments struct {
	value *Deployments
	isSet bool
}

func (v NullableDeployments) Get() *Deployments {
	return v.value
}

func (v *NullableDeployments) Set(val *Deployments) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployments) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployments(val *Deployments) *NullableDeployments {
	return &NullableDeployments{value: val, isSet: true}
}

func (v NullableDeployments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


